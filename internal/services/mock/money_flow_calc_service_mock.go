// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/money_flow_calc_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/money_flow_calc_service.go -destination=./internal/services/mock/money_flow_calc_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "bitbucket.org/Amartha/go-acuan-lib/model"
	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	event "bitbucket.org/Amartha/go-payment-lib/payment-api/models/event"
	gomock "go.uber.org/mock/gomock"
)

// MockMoneyFlowService is a mock of MoneyFlowService interface.
type MockMoneyFlowService struct {
	ctrl     *gomock.Controller
	recorder *MockMoneyFlowServiceMockRecorder
	isgomock struct{}
}

// MockMoneyFlowServiceMockRecorder is the mock recorder for MockMoneyFlowService.
type MockMoneyFlowServiceMockRecorder struct {
	mock *MockMoneyFlowService
}

// NewMockMoneyFlowService creates a new mock instance.
func NewMockMoneyFlowService(ctrl *gomock.Controller) *MockMoneyFlowService {
	mock := &MockMoneyFlowService{ctrl: ctrl}
	mock.recorder = &MockMoneyFlowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoneyFlowService) EXPECT() *MockMoneyFlowServiceMockRecorder {
	return m.recorder
}

// CheckEligibleTransaction mocks base method.
func (m *MockMoneyFlowService) CheckEligibleTransaction(ctx context.Context, paymentType, breakdownTransactionType string) (*models.BusinessRuleConfig, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEligibleTransaction", ctx, paymentType, breakdownTransactionType)
	ret0, _ := ret[0].(*models.BusinessRuleConfig)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckEligibleTransaction indicates an expected call of CheckEligibleTransaction.
func (mr *MockMoneyFlowServiceMockRecorder) CheckEligibleTransaction(ctx, paymentType, breakdownTransactionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEligibleTransaction", reflect.TypeOf((*MockMoneyFlowService)(nil).CheckEligibleTransaction), ctx, paymentType, breakdownTransactionType)
}

// GetDetailedTransactionsBySummaryID mocks base method.
func (m *MockMoneyFlowService) GetDetailedTransactionsBySummaryID(ctx context.Context, summaryID string, opts models.DetailedTransactionFilterOptions) ([]models.DetailedTransactionOut, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailedTransactionsBySummaryID", ctx, summaryID, opts)
	ret0, _ := ret[0].([]models.DetailedTransactionOut)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDetailedTransactionsBySummaryID indicates an expected call of GetDetailedTransactionsBySummaryID.
func (mr *MockMoneyFlowServiceMockRecorder) GetDetailedTransactionsBySummaryID(ctx, summaryID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailedTransactionsBySummaryID", reflect.TypeOf((*MockMoneyFlowService)(nil).GetDetailedTransactionsBySummaryID), ctx, summaryID, opts)
}

// GetSummariesList mocks base method.
func (m *MockMoneyFlowService) GetSummariesList(ctx context.Context, opts models.MoneyFlowSummaryFilterOptions) ([]models.MoneyFlowSummaryOut, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummariesList", ctx, opts)
	ret0, _ := ret[0].([]models.MoneyFlowSummaryOut)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSummariesList indicates an expected call of GetSummariesList.
func (mr *MockMoneyFlowServiceMockRecorder) GetSummariesList(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummariesList", reflect.TypeOf((*MockMoneyFlowService)(nil).GetSummariesList), ctx, opts)
}

// GetSummaryDetailBySummaryID mocks base method.
func (m *MockMoneyFlowService) GetSummaryDetailBySummaryID(ctx context.Context, summaryID string) (models.MoneyFlowSummaryDetailBySummaryIDOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaryDetailBySummaryID", ctx, summaryID)
	ret0, _ := ret[0].(models.MoneyFlowSummaryDetailBySummaryIDOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaryDetailBySummaryID indicates an expected call of GetSummaryDetailBySummaryID.
func (mr *MockMoneyFlowServiceMockRecorder) GetSummaryDetailBySummaryID(ctx, summaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaryDetailBySummaryID", reflect.TypeOf((*MockMoneyFlowService)(nil).GetSummaryDetailBySummaryID), ctx, summaryID)
}

// ProcessTransactionNotification mocks base method.
func (m *MockMoneyFlowService) ProcessTransactionNotification(ctx context.Context, notification model.Payload[model.DataOrder]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransactionNotification", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTransactionNotification indicates an expected call of ProcessTransactionNotification.
func (mr *MockMoneyFlowServiceMockRecorder) ProcessTransactionNotification(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransactionNotification", reflect.TypeOf((*MockMoneyFlowService)(nil).ProcessTransactionNotification), ctx, notification)
}

// ProcessTransactionStream mocks base method.
func (m *MockMoneyFlowService) ProcessTransactionStream(ctx context.Context, arg1 event.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransactionStream", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTransactionStream indicates an expected call of ProcessTransactionStream.
func (mr *MockMoneyFlowServiceMockRecorder) ProcessTransactionStream(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransactionStream", reflect.TypeOf((*MockMoneyFlowService)(nil).ProcessTransactionStream), ctx, arg1)
}

// UpdateSummary mocks base method.
func (m *MockMoneyFlowService) UpdateSummary(ctx context.Context, summaryID string, req models.UpdateMoneyFlowSummaryRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSummary", ctx, summaryID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSummary indicates an expected call of UpdateSummary.
func (mr *MockMoneyFlowServiceMockRecorder) UpdateSummary(ctx, summaryID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSummary", reflect.TypeOf((*MockMoneyFlowService)(nil).UpdateSummary), ctx, summaryID, req)
}
