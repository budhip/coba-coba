// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/file_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/file_service.go -destination=./internal/services/mock/file_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileService is a mock of FileService interface.
type MockFileService struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceMockRecorder
	isgomock struct{}
}

// MockFileServiceMockRecorder is the mock recorder for MockFileService.
type MockFileServiceMockRecorder struct {
	mock *MockFileService
}

// NewMockFileService creates a new mock instance.
func NewMockFileService(ctrl *gomock.Controller) *MockFileService {
	mock := &MockFileService{ctrl: ctrl}
	mock.recorder = &MockFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileService) EXPECT() *MockFileServiceMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockFileService) Upload(ctx context.Context, file *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockFileServiceMockRecorder) Upload(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileService)(nil).Upload), ctx, file)
}

// UploadWalletTransaction mocks base method.
func (m *MockFileService) UploadWalletTransaction(ctx context.Context, file *multipart.FileHeader, email, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadWalletTransaction", ctx, file, email, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadWalletTransaction indicates an expected call of UploadWalletTransaction.
func (mr *MockFileServiceMockRecorder) UploadWalletTransaction(ctx, file, email, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadWalletTransaction", reflect.TypeOf((*MockFileService)(nil).UploadWalletTransaction), ctx, file, email, clientID)
}

// UploadWalletTransactionFromGCS mocks base method.
func (m *MockFileService) UploadWalletTransactionFromGCS(ctx context.Context, filePath, bucketName, clientID string, isPublish bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadWalletTransactionFromGCS", ctx, filePath, bucketName, clientID, isPublish)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadWalletTransactionFromGCS indicates an expected call of UploadWalletTransactionFromGCS.
func (mr *MockFileServiceMockRecorder) UploadWalletTransactionFromGCS(ctx, filePath, bucketName, clientID, isPublish any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadWalletTransactionFromGCS", reflect.TypeOf((*MockFileService)(nil).UploadWalletTransactionFromGCS), ctx, filePath, bucketName, clientID, isPublish)
}
