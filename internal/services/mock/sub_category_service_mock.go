// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/sub_category_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/sub_category_service.go -destination=./internal/services/mock/sub_category_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSubCategoryService is a mock of SubCategoryService interface.
type MockSubCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockSubCategoryServiceMockRecorder
	isgomock struct{}
}

// MockSubCategoryServiceMockRecorder is the mock recorder for MockSubCategoryService.
type MockSubCategoryServiceMockRecorder struct {
	mock *MockSubCategoryService
}

// NewMockSubCategoryService creates a new mock instance.
func NewMockSubCategoryService(ctrl *gomock.Controller) *MockSubCategoryService {
	mock := &MockSubCategoryService{ctrl: ctrl}
	mock.recorder = &MockSubCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubCategoryService) EXPECT() *MockSubCategoryServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubCategoryService) Create(ctx context.Context, req models.CreateSubCategory) (*models.SubCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*models.SubCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubCategoryServiceMockRecorder) Create(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubCategoryService)(nil).Create), ctx, req)
}

// GetAll mocks base method.
func (m *MockSubCategoryService) GetAll(ctx context.Context) (*[]models.SubCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*[]models.SubCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubCategoryServiceMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubCategoryService)(nil).GetAll), ctx)
}
