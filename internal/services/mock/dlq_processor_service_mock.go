// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/dlq_processor_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/dlq_processor_service.go -destination=./internal/services/mock/dlq_processor_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDLQProcessorService is a mock of DLQProcessorService interface.
type MockDLQProcessorService struct {
	ctrl     *gomock.Controller
	recorder *MockDLQProcessorServiceMockRecorder
	isgomock struct{}
}

// MockDLQProcessorServiceMockRecorder is the mock recorder for MockDLQProcessorService.
type MockDLQProcessorServiceMockRecorder struct {
	mock *MockDLQProcessorService
}

// NewMockDLQProcessorService creates a new mock instance.
func NewMockDLQProcessorService(ctrl *gomock.Controller) *MockDLQProcessorService {
	mock := &MockDLQProcessorService{ctrl: ctrl}
	mock.recorder = &MockDLQProcessorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDLQProcessorService) EXPECT() *MockDLQProcessorServiceMockRecorder {
	return m.recorder
}

// GetStatusRetry mocks base method.
func (m *MockDLQProcessorService) GetStatusRetry(ctx context.Context, processRetryId string) (models.StatusRetryDLQ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusRetry", ctx, processRetryId)
	ret0, _ := ret[0].(models.StatusRetryDLQ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusRetry indicates an expected call of GetStatusRetry.
func (mr *MockDLQProcessorServiceMockRecorder) GetStatusRetry(ctx, processRetryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusRetry", reflect.TypeOf((*MockDLQProcessorService)(nil).GetStatusRetry), ctx, processRetryId)
}

// RetryAccountMutation mocks base method.
func (m *MockDLQProcessorService) RetryAccountMutation(ctx context.Context, message models.FailedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryAccountMutation", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetryAccountMutation indicates an expected call of RetryAccountMutation.
func (mr *MockDLQProcessorServiceMockRecorder) RetryAccountMutation(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryAccountMutation", reflect.TypeOf((*MockDLQProcessorService)(nil).RetryAccountMutation), ctx, message)
}

// RetryCreateOrderTransaction mocks base method.
func (m *MockDLQProcessorService) RetryCreateOrderTransaction(ctx context.Context, message models.FailedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryCreateOrderTransaction", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetryCreateOrderTransaction indicates an expected call of RetryCreateOrderTransaction.
func (mr *MockDLQProcessorServiceMockRecorder) RetryCreateOrderTransaction(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryCreateOrderTransaction", reflect.TypeOf((*MockDLQProcessorService)(nil).RetryCreateOrderTransaction), ctx, message)
}

// SendNotificationAccountFailure mocks base method.
func (m *MockDLQProcessorService) SendNotificationAccountFailure(ctx context.Context, message models.FailedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationAccountFailure", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotificationAccountFailure indicates an expected call of SendNotificationAccountFailure.
func (mr *MockDLQProcessorServiceMockRecorder) SendNotificationAccountFailure(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationAccountFailure", reflect.TypeOf((*MockDLQProcessorService)(nil).SendNotificationAccountFailure), ctx, message)
}

// SendNotificationBalanceHvtFailure mocks base method.
func (m *MockDLQProcessorService) SendNotificationBalanceHvtFailure(ctx context.Context, message models.FailedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationBalanceHvtFailure", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotificationBalanceHvtFailure indicates an expected call of SendNotificationBalanceHvtFailure.
func (mr *MockDLQProcessorServiceMockRecorder) SendNotificationBalanceHvtFailure(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationBalanceHvtFailure", reflect.TypeOf((*MockDLQProcessorService)(nil).SendNotificationBalanceHvtFailure), ctx, message)
}

// SendNotificationOrderFailure mocks base method.
func (m *MockDLQProcessorService) SendNotificationOrderFailure(ctx context.Context, message models.FailedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationOrderFailure", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotificationOrderFailure indicates an expected call of SendNotificationOrderFailure.
func (mr *MockDLQProcessorServiceMockRecorder) SendNotificationOrderFailure(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationOrderFailure", reflect.TypeOf((*MockDLQProcessorService)(nil).SendNotificationOrderFailure), ctx, message)
}

// SendNotificationRetryFailure mocks base method.
func (m *MockDLQProcessorService) SendNotificationRetryFailure(ctx context.Context, operation, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotificationRetryFailure", ctx, operation, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotificationRetryFailure indicates an expected call of SendNotificationRetryFailure.
func (mr *MockDLQProcessorServiceMockRecorder) SendNotificationRetryFailure(ctx, operation, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotificationRetryFailure", reflect.TypeOf((*MockDLQProcessorService)(nil).SendNotificationRetryFailure), ctx, operation, message)
}

// UpsertStatusRetry mocks base method.
func (m *MockDLQProcessorService) UpsertStatusRetry(ctx context.Context, processRetryId string, status models.StatusRetryDLQ) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertStatusRetry", ctx, processRetryId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertStatusRetry indicates an expected call of UpsertStatusRetry.
func (mr *MockDLQProcessorServiceMockRecorder) UpsertStatusRetry(ctx, processRetryId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertStatusRetry", reflect.TypeOf((*MockDLQProcessorService)(nil).UpsertStatusRetry), ctx, processRetryId, status)
}
