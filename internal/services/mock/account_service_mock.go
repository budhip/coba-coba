// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/account_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/account_service.go -destination=./internal/services/mock/account_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountService is a mock of AccountService interface.
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
	isgomock struct{}
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService.
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance.
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountService) Create(ctx context.Context, in models.CreateAccount) (models.CreateAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(models.CreateAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountServiceMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountService)(nil).Create), ctx, in)
}

// Delete mocks base method.
func (m *MockAccountService) Delete(ctx context.Context, accountNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, accountNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountServiceMockRecorder) Delete(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountService)(nil).Delete), ctx, accountNumber)
}

// GetACuanAccountNumber mocks base method.
func (m *MockAccountService) GetACuanAccountNumber(ctx context.Context, accountNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACuanAccountNumber", ctx, accountNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetACuanAccountNumber indicates an expected call of GetACuanAccountNumber.
func (mr *MockAccountServiceMockRecorder) GetACuanAccountNumber(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACuanAccountNumber", reflect.TypeOf((*MockAccountService)(nil).GetACuanAccountNumber), ctx, accountNumber)
}

// GetList mocks base method.
func (m *MockAccountService) GetList(ctx context.Context, opts models.AccountFilterOptions) ([]models.GetAccountOut, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, opts)
	ret0, _ := ret[0].([]models.GetAccountOut)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetList indicates an expected call of GetList.
func (mr *MockAccountServiceMockRecorder) GetList(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockAccountService)(nil).GetList), ctx, opts)
}

// GetOneByAccountNumber mocks base method.
func (m *MockAccountService) GetOneByAccountNumber(ctx context.Context, accountNumber string) (models.GetAccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByAccountNumber", ctx, accountNumber)
	ret0, _ := ret[0].(models.GetAccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByAccountNumber indicates an expected call of GetOneByAccountNumber.
func (mr *MockAccountServiceMockRecorder) GetOneByAccountNumber(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByAccountNumber", reflect.TypeOf((*MockAccountService)(nil).GetOneByAccountNumber), ctx, accountNumber)
}

// GetOneByAccountNumberOrLegacyId mocks base method.
func (m *MockAccountService) GetOneByAccountNumberOrLegacyId(ctx context.Context, accountNumber string) (models.GetAccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByAccountNumberOrLegacyId", ctx, accountNumber)
	ret0, _ := ret[0].(models.GetAccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByAccountNumberOrLegacyId indicates an expected call of GetOneByAccountNumberOrLegacyId.
func (mr *MockAccountServiceMockRecorder) GetOneByAccountNumberOrLegacyId(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByAccountNumberOrLegacyId", reflect.TypeOf((*MockAccountService)(nil).GetOneByAccountNumberOrLegacyId), ctx, accountNumber)
}

// GetTotalBalance mocks base method.
func (m *MockAccountService) GetTotalBalance(ctx context.Context, opts models.AccountFilterOptions) (*decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalBalance", ctx, opts)
	ret0, _ := ret[0].(*decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalBalance indicates an expected call of GetTotalBalance.
func (mr *MockAccountServiceMockRecorder) GetTotalBalance(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalBalance", reflect.TypeOf((*MockAccountService)(nil).GetTotalBalance), ctx, opts)
}

// RemoveDuplicateAccountMigration mocks base method.
func (m *MockAccountService) RemoveDuplicateAccountMigration(ctx context.Context, accountNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDuplicateAccountMigration", ctx, accountNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDuplicateAccountMigration indicates an expected call of RemoveDuplicateAccountMigration.
func (mr *MockAccountServiceMockRecorder) RemoveDuplicateAccountMigration(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDuplicateAccountMigration", reflect.TypeOf((*MockAccountService)(nil).RemoveDuplicateAccountMigration), ctx, accountNumber)
}

// Update mocks base method.
func (m *MockAccountService) Update(ctx context.Context, reqBody models.UpdateAccountIn) (models.GetAccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, reqBody)
	ret0, _ := ret[0].(models.GetAccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountServiceMockRecorder) Update(ctx, reqBody any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountService)(nil).Update), ctx, reqBody)
}

// UpdateBySubCategory mocks base method.
func (m *MockAccountService) UpdateBySubCategory(ctx context.Context, in models.UpdateAccountBySubCategoryIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBySubCategory", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBySubCategory indicates an expected call of UpdateBySubCategory.
func (mr *MockAccountServiceMockRecorder) UpdateBySubCategory(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBySubCategory", reflect.TypeOf((*MockAccountService)(nil).UpdateBySubCategory), ctx, in)
}

// Upsert mocks base method.
func (m *MockAccountService) Upsert(ctx context.Context, in models.AccountUpsert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockAccountServiceMockRecorder) Upsert(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockAccountService)(nil).Upsert), ctx, in)
}
