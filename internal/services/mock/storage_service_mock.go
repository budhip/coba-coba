// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/storage_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/storage_service.go -destination=./internal/services/mock/storage_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
	isgomock struct{}
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// IsReportExist mocks base method.
func (m *MockStorageService) IsReportExist(ctx context.Context, reportName models.ReportName, reportDate time.Time) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReportExist", ctx, reportName, reportDate)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// IsReportExist indicates an expected call of IsReportExist.
func (mr *MockStorageServiceMockRecorder) IsReportExist(ctx, reportName, reportDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReportExist", reflect.TypeOf((*MockStorageService)(nil).IsReportExist), ctx, reportName, reportDate)
}
