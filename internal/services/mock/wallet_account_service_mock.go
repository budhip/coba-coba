// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/wallet_account_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/wallet_account_service.go -destination=./internal/services/mock/wallet_account_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletAccountService is a mock of WalletAccountService interface.
type MockWalletAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletAccountServiceMockRecorder
	isgomock struct{}
}

// MockWalletAccountServiceMockRecorder is the mock recorder for MockWalletAccountService.
type MockWalletAccountServiceMockRecorder struct {
	mock *MockWalletAccountService
}

// NewMockWalletAccountService creates a new mock instance.
func NewMockWalletAccountService(ctrl *gomock.Controller) *MockWalletAccountService {
	mock := &MockWalletAccountService{ctrl: ctrl}
	mock.recorder = &MockWalletAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletAccountService) EXPECT() *MockWalletAccountServiceMockRecorder {
	return m.recorder
}

// CreateAccountFeature mocks base method.
func (m *MockWalletAccountService) CreateAccountFeature(arg0 context.Context, arg1 models.CreateWalletIn) (*models.WalletOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccountFeature", arg0, arg1)
	ret0, _ := ret[0].(*models.WalletOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccountFeature indicates an expected call of CreateAccountFeature.
func (mr *MockWalletAccountServiceMockRecorder) CreateAccountFeature(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccountFeature", reflect.TypeOf((*MockWalletAccountService)(nil).CreateAccountFeature), arg0, arg1)
}
