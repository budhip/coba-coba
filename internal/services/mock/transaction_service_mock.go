// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/transaction_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/transaction_service.go -destination=./internal/services/mock/transaction_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
	isgomock struct{}
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// CancelReservedTransaction mocks base method.
func (m *MockTransactionService) CancelReservedTransaction(ctx context.Context, transactionID string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelReservedTransaction", ctx, transactionID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelReservedTransaction indicates an expected call of CancelReservedTransaction.
func (mr *MockTransactionServiceMockRecorder) CancelReservedTransaction(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelReservedTransaction", reflect.TypeOf((*MockTransactionService)(nil).CancelReservedTransaction), ctx, transactionID)
}

// CollectRepayment mocks base method.
func (m *MockTransactionService) CollectRepayment(ctx context.Context) (*models.CollectRepayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectRepayment", ctx)
	ret0, _ := ret[0].(*models.CollectRepayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectRepayment indicates an expected call of CollectRepayment.
func (mr *MockTransactionServiceMockRecorder) CollectRepayment(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectRepayment", reflect.TypeOf((*MockTransactionService)(nil).CollectRepayment), ctx)
}

// CommitReservedTransaction mocks base method.
func (m *MockTransactionService) CommitReservedTransaction(ctx context.Context, transactionID, clientID string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitReservedTransaction", ctx, transactionID, clientID)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommitReservedTransaction indicates an expected call of CommitReservedTransaction.
func (mr *MockTransactionServiceMockRecorder) CommitReservedTransaction(ctx, transactionID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitReservedTransaction", reflect.TypeOf((*MockTransactionService)(nil).CommitReservedTransaction), ctx, transactionID, clientID)
}

// DownloadTransactionFileCSV mocks base method.
func (m *MockTransactionService) DownloadTransactionFileCSV(ctx context.Context, req models.DownloadTransactionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadTransactionFileCSV", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadTransactionFileCSV indicates an expected call of DownloadTransactionFileCSV.
func (mr *MockTransactionServiceMockRecorder) DownloadTransactionFileCSV(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTransactionFileCSV", reflect.TypeOf((*MockTransactionService)(nil).DownloadTransactionFileCSV), ctx, req)
}

// GenerateTransactionReport mocks base method.
func (m *MockTransactionService) GenerateTransactionReport(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTransactionReport", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTransactionReport indicates an expected call of GenerateTransactionReport.
func (mr *MockTransactionServiceMockRecorder) GenerateTransactionReport(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTransactionReport", reflect.TypeOf((*MockTransactionService)(nil).GenerateTransactionReport), ctx)
}

// GetAllTransaction mocks base method.
func (m *MockTransactionService) GetAllTransaction(ctx context.Context, opts models.TransactionFilterOptions) ([]models.GetTransactionOut, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransaction", ctx, opts)
	ret0, _ := ret[0].([]models.GetTransactionOut)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllTransaction indicates an expected call of GetAllTransaction.
func (mr *MockTransactionServiceMockRecorder) GetAllTransaction(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransaction", reflect.TypeOf((*MockTransactionService)(nil).GetAllTransaction), ctx, opts)
}

// GetByTransactionTypeAndRefNumber mocks base method.
func (m *MockTransactionService) GetByTransactionTypeAndRefNumber(ctx context.Context, req *models.TransactionGetByTypeAndRefNumberRequest) (*models.GetTransactionOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionTypeAndRefNumber", ctx, req)
	ret0, _ := ret[0].(*models.GetTransactionOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionTypeAndRefNumber indicates an expected call of GetByTransactionTypeAndRefNumber.
func (mr *MockTransactionServiceMockRecorder) GetByTransactionTypeAndRefNumber(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionTypeAndRefNumber", reflect.TypeOf((*MockTransactionService)(nil).GetByTransactionTypeAndRefNumber), ctx, req)
}

// GetReportRepayment mocks base method.
func (m *MockTransactionService) GetReportRepayment(ctx context.Context) ([]models.ReportRepayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportRepayment", ctx)
	ret0, _ := ret[0].([]models.ReportRepayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportRepayment indicates an expected call of GetReportRepayment.
func (mr *MockTransactionServiceMockRecorder) GetReportRepayment(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportRepayment", reflect.TypeOf((*MockTransactionService)(nil).GetReportRepayment), ctx)
}

// GetStatusCount mocks base method.
func (m *MockTransactionService) GetStatusCount(ctx context.Context, threshold uint, opts models.TransactionFilterOptions) (models.StatusCountTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusCount", ctx, threshold, opts)
	ret0, _ := ret[0].(models.StatusCountTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusCount indicates an expected call of GetStatusCount.
func (mr *MockTransactionServiceMockRecorder) GetStatusCount(ctx, threshold, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusCount", reflect.TypeOf((*MockTransactionService)(nil).GetStatusCount), ctx, threshold, opts)
}

// NewStoreBulkTransaction mocks base method.
func (m *MockTransactionService) NewStoreBulkTransaction(ctx context.Context, req []models.TransactionReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStoreBulkTransaction", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewStoreBulkTransaction indicates an expected call of NewStoreBulkTransaction.
func (mr *MockTransactionServiceMockRecorder) NewStoreBulkTransaction(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStoreBulkTransaction", reflect.TypeOf((*MockTransactionService)(nil).NewStoreBulkTransaction), ctx, req)
}

// PublishTransaction mocks base method.
func (m *MockTransactionService) PublishTransaction(ctx context.Context, in models.DoPublishTransactionRequest) (models.DoPublishTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTransaction", ctx, in)
	ret0, _ := ret[0].(models.DoPublishTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishTransaction indicates an expected call of PublishTransaction.
func (mr *MockTransactionServiceMockRecorder) PublishTransaction(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTransaction", reflect.TypeOf((*MockTransactionService)(nil).PublishTransaction), ctx, in)
}

// StoreBulkTransaction mocks base method.
func (m *MockTransactionService) StoreBulkTransaction(ctx context.Context, req []models.TransactionReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBulkTransaction", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBulkTransaction indicates an expected call of StoreBulkTransaction.
func (mr *MockTransactionServiceMockRecorder) StoreBulkTransaction(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBulkTransaction", reflect.TypeOf((*MockTransactionService)(nil).StoreBulkTransaction), ctx, req)
}

// StoreTransaction mocks base method.
func (m *MockTransactionService) StoreTransaction(ctx context.Context, req models.TransactionReq, processType models.TransactionStoreProcessType, clientID string) (models.GetTransactionOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTransaction", ctx, req, processType, clientID)
	ret0, _ := ret[0].(models.GetTransactionOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreTransaction indicates an expected call of StoreTransaction.
func (mr *MockTransactionServiceMockRecorder) StoreTransaction(ctx, req, processType, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTransaction", reflect.TypeOf((*MockTransactionService)(nil).StoreTransaction), ctx, req, processType, clientID)
}
