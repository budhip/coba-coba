// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/master_data_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/master_data_service.go -destination=./internal/services/mock/master_data_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMasterDataService is a mock of MasterDataService interface.
type MockMasterDataService struct {
	ctrl     *gomock.Controller
	recorder *MockMasterDataServiceMockRecorder
	isgomock struct{}
}

// MockMasterDataServiceMockRecorder is the mock recorder for MockMasterDataService.
type MockMasterDataServiceMockRecorder struct {
	mock *MockMasterDataService
}

// NewMockMasterDataService creates a new mock instance.
func NewMockMasterDataService(ctrl *gomock.Controller) *MockMasterDataService {
	mock := &MockMasterDataService{ctrl: ctrl}
	mock.recorder = &MockMasterDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterDataService) EXPECT() *MockMasterDataServiceMockRecorder {
	return m.recorder
}

// CreateOrderType mocks base method.
func (m *MockMasterDataService) CreateOrderType(ctx context.Context, ot models.OrderType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderType", ctx, ot)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderType indicates an expected call of CreateOrderType.
func (mr *MockMasterDataServiceMockRecorder) CreateOrderType(ctx, ot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderType", reflect.TypeOf((*MockMasterDataService)(nil).CreateOrderType), ctx, ot)
}

// GetAllOrderType mocks base method.
func (m *MockMasterDataService) GetAllOrderType(ctx context.Context, filter models.FilterMasterData) ([]models.OrderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderType", ctx, filter)
	ret0, _ := ret[0].([]models.OrderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderType indicates an expected call of GetAllOrderType.
func (mr *MockMasterDataServiceMockRecorder) GetAllOrderType(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderType", reflect.TypeOf((*MockMasterDataService)(nil).GetAllOrderType), ctx, filter)
}

// GetAllTransactionType mocks base method.
func (m *MockMasterDataService) GetAllTransactionType(ctx context.Context, filter models.FilterMasterData) ([]models.TransactionType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTransactionType", ctx, filter)
	ret0, _ := ret[0].([]models.TransactionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTransactionType indicates an expected call of GetAllTransactionType.
func (mr *MockMasterDataServiceMockRecorder) GetAllTransactionType(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTransactionType", reflect.TypeOf((*MockMasterDataService)(nil).GetAllTransactionType), ctx, filter)
}

// GetAllVATConfig mocks base method.
func (m *MockMasterDataService) GetAllVATConfig(ctx context.Context) ([]models.ConfigVatRevenue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVATConfig", ctx)
	ret0, _ := ret[0].([]models.ConfigVatRevenue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVATConfig indicates an expected call of GetAllVATConfig.
func (mr *MockMasterDataServiceMockRecorder) GetAllVATConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVATConfig", reflect.TypeOf((*MockMasterDataService)(nil).GetAllVATConfig), ctx)
}

// GetOneOrderType mocks base method.
func (m *MockMasterDataService) GetOneOrderType(ctx context.Context, orderTypeCode string) (*models.OrderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOrderType", ctx, orderTypeCode)
	ret0, _ := ret[0].(*models.OrderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneOrderType indicates an expected call of GetOneOrderType.
func (mr *MockMasterDataServiceMockRecorder) GetOneOrderType(ctx, orderTypeCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOrderType", reflect.TypeOf((*MockMasterDataService)(nil).GetOneOrderType), ctx, orderTypeCode)
}

// GetOneTransactionType mocks base method.
func (m *MockMasterDataService) GetOneTransactionType(ctx context.Context, transactionTypeCode string) (*models.TransactionType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneTransactionType", ctx, transactionTypeCode)
	ret0, _ := ret[0].(*models.TransactionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneTransactionType indicates an expected call of GetOneTransactionType.
func (mr *MockMasterDataServiceMockRecorder) GetOneTransactionType(ctx, transactionTypeCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneTransactionType", reflect.TypeOf((*MockMasterDataService)(nil).GetOneTransactionType), ctx, transactionTypeCode)
}

// UpdateOrderType mocks base method.
func (m *MockMasterDataService) UpdateOrderType(ctx context.Context, ot models.OrderType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderType", ctx, ot)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderType indicates an expected call of UpdateOrderType.
func (mr *MockMasterDataServiceMockRecorder) UpdateOrderType(ctx, ot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderType", reflect.TypeOf((*MockMasterDataService)(nil).UpdateOrderType), ctx, ot)
}

// UpsertVATConfig mocks base method.
func (m *MockMasterDataService) UpsertVATConfig(ctx context.Context, configs []models.ConfigVatRevenue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertVATConfig", ctx, configs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertVATConfig indicates an expected call of UpsertVATConfig.
func (mr *MockMasterDataServiceMockRecorder) UpsertVATConfig(ctx, configs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertVATConfig", reflect.TypeOf((*MockMasterDataService)(nil).UpsertVATConfig), ctx, configs)
}
