// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/wallet_transaction_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/wallet_transaction_service.go -destination=./internal/services/mock/wallet_transaction_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletTrxService is a mock of WalletTrxService interface.
type MockWalletTrxService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletTrxServiceMockRecorder
	isgomock struct{}
}

// MockWalletTrxServiceMockRecorder is the mock recorder for MockWalletTrxService.
type MockWalletTrxServiceMockRecorder struct {
	mock *MockWalletTrxService
}

// NewMockWalletTrxService creates a new mock instance.
func NewMockWalletTrxService(ctrl *gomock.Controller) *MockWalletTrxService {
	mock := &MockWalletTrxService{ctrl: ctrl}
	mock.recorder = &MockWalletTrxServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletTrxService) EXPECT() *MockWalletTrxServiceMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockWalletTrxService) CreateTransaction(ctx context.Context, in models.CreateWalletTransactionRequest) (*models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, in)
	ret0, _ := ret[0].(*models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockWalletTrxServiceMockRecorder) CreateTransaction(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockWalletTrxService)(nil).CreateTransaction), ctx, in)
}

// EnqueueTransaction mocks base method.
func (m *MockWalletTrxService) EnqueueTransaction(ctx context.Context, in models.CreateWalletTransactionRequest) (*models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueTransaction", ctx, in)
	ret0, _ := ret[0].(*models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueTransaction indicates an expected call of EnqueueTransaction.
func (mr *MockWalletTrxServiceMockRecorder) EnqueueTransaction(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueTransaction", reflect.TypeOf((*MockWalletTrxService)(nil).EnqueueTransaction), ctx, in)
}

// List mocks base method.
func (m *MockWalletTrxService) List(ctx context.Context, opts models.WalletTrxFilterOptions) ([]models.WalletTransaction, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]models.WalletTransaction)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockWalletTrxServiceMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWalletTrxService)(nil).List), ctx, opts)
}

// ProcessReservedTransaction mocks base method.
func (m *MockWalletTrxService) ProcessReservedTransaction(ctx context.Context, req models.UpdateStatusWalletTransactionRequest) (*models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessReservedTransaction", ctx, req)
	ret0, _ := ret[0].(*models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessReservedTransaction indicates an expected call of ProcessReservedTransaction.
func (mr *MockWalletTrxServiceMockRecorder) ProcessReservedTransaction(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessReservedTransaction", reflect.TypeOf((*MockWalletTrxService)(nil).ProcessReservedTransaction), ctx, req)
}
