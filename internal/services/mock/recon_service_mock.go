// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/recon_service.go
//
// Generated by this command:
//
//	mockgen -source=./internal/services/recon_service.go -destination=./internal/services/mock/recon_service_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "bitbucket.org/Amartha/go-acuan-lib/model"
	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockReconService is a mock of ReconService interface.
type MockReconService struct {
	ctrl     *gomock.Controller
	recorder *MockReconServiceMockRecorder
	isgomock struct{}
}

// MockReconServiceMockRecorder is the mock recorder for MockReconService.
type MockReconServiceMockRecorder struct {
	mock *MockReconService
}

// NewMockReconService creates a new mock instance.
func NewMockReconService(ctrl *gomock.Controller) *MockReconService {
	mock := &MockReconService{ctrl: ctrl}
	mock.recorder = &MockReconServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconService) EXPECT() *MockReconServiceMockRecorder {
	return m.recorder
}

// AppendAccountTransactions mocks base method.
func (m *MockReconService) AppendAccountTransactions(accountNumber string, trx model.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendAccountTransactions", accountNumber, trx)
}

// AppendAccountTransactions indicates an expected call of AppendAccountTransactions.
func (mr *MockReconServiceMockRecorder) AppendAccountTransactions(accountNumber, trx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendAccountTransactions", reflect.TypeOf((*MockReconService)(nil).AppendAccountTransactions), accountNumber, trx)
}

// DoDailyBalance mocks base method.
func (m *MockReconService) DoDailyBalance(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoDailyBalance", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoDailyBalance indicates an expected call of DoDailyBalance.
func (mr *MockReconServiceMockRecorder) DoDailyBalance(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoDailyBalance", reflect.TypeOf((*MockReconService)(nil).DoDailyBalance), ctx)
}

// GetListReconHistory mocks base method.
func (m *MockReconService) GetListReconHistory(ctx context.Context, opts models.ReconToolHistoryFilterOptions) ([]models.ReconToolHistory, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListReconHistory", ctx, opts)
	ret0, _ := ret[0].([]models.ReconToolHistory)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListReconHistory indicates an expected call of GetListReconHistory.
func (mr *MockReconServiceMockRecorder) GetListReconHistory(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListReconHistory", reflect.TypeOf((*MockReconService)(nil).GetListReconHistory), ctx, opts)
}

// GetResultFileURL mocks base method.
func (m *MockReconService) GetResultFileURL(ctx context.Context, id uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultFileURL", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResultFileURL indicates an expected call of GetResultFileURL.
func (mr *MockReconServiceMockRecorder) GetResultFileURL(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultFileURL", reflect.TypeOf((*MockReconService)(nil).GetResultFileURL), ctx, id)
}

// ProcessReconTaskQueue mocks base method.
func (m *MockReconService) ProcessReconTaskQueue(ctx context.Context, reconHistoryId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessReconTaskQueue", ctx, reconHistoryId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessReconTaskQueue indicates an expected call of ProcessReconTaskQueue.
func (mr *MockReconServiceMockRecorder) ProcessReconTaskQueue(ctx, reconHistoryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessReconTaskQueue", reflect.TypeOf((*MockReconService)(nil).ProcessReconTaskQueue), ctx, reconHistoryId)
}

// UploadReconTemplate mocks base method.
func (m *MockReconService) UploadReconTemplate(ctx context.Context, req *models.UploadReconFileRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadReconTemplate", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadReconTemplate indicates an expected call of UploadReconTemplate.
func (mr *MockReconServiceMockRecorder) UploadReconTemplate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadReconTemplate", reflect.TypeOf((*MockReconService)(nil).UploadReconTemplate), ctx, req)
}
