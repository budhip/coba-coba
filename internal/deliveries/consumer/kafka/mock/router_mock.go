// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/deliveries/consumer/kafka/router.go
//
// Generated by this command:
//
//	mockgen -source=./internal/deliveries/consumer/kafka/router.go -destination=./internal/deliveries/consumer/kafka/mock/router_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProcessStartStopper is a mock of ProcessStartStopper interface.
type MockProcessStartStopper struct {
	ctrl     *gomock.Controller
	recorder *MockProcessStartStopperMockRecorder
}

// MockProcessStartStopperMockRecorder is the mock recorder for MockProcessStartStopper.
type MockProcessStartStopperMockRecorder struct {
	mock *MockProcessStartStopper
}

// NewMockProcessStartStopper creates a new mock instance.
func NewMockProcessStartStopper(ctrl *gomock.Controller) *MockProcessStartStopper {
	mock := &MockProcessStartStopper{ctrl: ctrl}
	mock.recorder = &MockProcessStartStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessStartStopper) EXPECT() *MockProcessStartStopperMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockProcessStartStopper) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockProcessStartStopperMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProcessStartStopper)(nil).Start))
}

// Stop mocks base method.
func (m *MockProcessStartStopper) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockProcessStartStopperMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProcessStartStopper)(nil).Stop))
}
