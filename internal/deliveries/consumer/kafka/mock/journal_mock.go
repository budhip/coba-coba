// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/deliveries/consumer/kafka/journal.go
//
// Generated by this command:
//
//	mockgen -source=./internal/deliveries/consumer/kafka/journal.go -destination=./internal/deliveries/consumer/kafka/mock/journal_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockJournalPublisher is a mock of JournalPublisher interface.
type MockJournalPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockJournalPublisherMockRecorder
	isgomock struct{}
}

// MockJournalPublisherMockRecorder is the mock recorder for MockJournalPublisher.
type MockJournalPublisherMockRecorder struct {
	mock *MockJournalPublisher
}

// NewMockJournalPublisher creates a new mock instance.
func NewMockJournalPublisher(ctrl *gomock.Controller) *MockJournalPublisher {
	mock := &MockJournalPublisher{ctrl: ctrl}
	mock.recorder = &MockJournalPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJournalPublisher) EXPECT() *MockJournalPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockJournalPublisher) Publish(ctx context.Context, payload *models.JournalStreamPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockJournalPublisherMockRecorder) Publish(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockJournalPublisher)(nil).Publish), ctx, payload)
}
