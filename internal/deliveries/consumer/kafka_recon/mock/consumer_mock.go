// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/deliveries/consumer/kafka_recon/consumer.go
//
// Generated by this command:
//
//	mockgen -source=./internal/deliveries/consumer/kafka_recon/consumer.go -destination=./internal/deliveries/consumer/kafka_recon/mock/consumer_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	model "bitbucket.org/Amartha/go-acuan-lib/model"
	gomock "go.uber.org/mock/gomock"
)

// MockConsumer is a mock of Consumer interface.
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
	isgomock struct{}
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer.
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance.
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockConsumer) Consume(dateLimit time.Time, initialOffset int64, processor func([]model.Transaction)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consume", dateLimit, initialOffset, processor)
}

// Consume indicates an expected call of Consume.
func (mr *MockConsumerMockRecorder) Consume(dateLimit, initialOffset, processor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockConsumer)(nil).Consume), dateLimit, initialOffset, processor)
}
