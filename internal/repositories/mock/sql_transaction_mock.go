// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_transaction.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_transaction.go -destination=./internal/repositories/mock/sql_transaction_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CheckRefNumbers mocks base method.
func (m *MockTransactionRepository) CheckRefNumbers(ctx context.Context, refNumbers ...string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range refNumbers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckRefNumbers", varargs...)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRefNumbers indicates an expected call of CheckRefNumbers.
func (mr *MockTransactionRepositoryMockRecorder) CheckRefNumbers(ctx any, refNumbers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, refNumbers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRefNumbers", reflect.TypeOf((*MockTransactionRepository)(nil).CheckRefNumbers), varargs...)
}

// ColectRepayment mocks base method.
func (m *MockTransactionRepository) ColectRepayment(ctx context.Context, date time.Time) (*models.CollectRepayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColectRepayment", ctx, date)
	ret0, _ := ret[0].(*models.CollectRepayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ColectRepayment indicates an expected call of ColectRepayment.
func (mr *MockTransactionRepositoryMockRecorder) ColectRepayment(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColectRepayment", reflect.TypeOf((*MockTransactionRepository)(nil).ColectRepayment), ctx, date)
}

// CountAll mocks base method.
func (m *MockTransactionRepository) CountAll(ctx context.Context, opts models.TransactionFilterOptions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAll", ctx, opts)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAll indicates an expected call of CountAll.
func (mr *MockTransactionRepositoryMockRecorder) CountAll(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAll", reflect.TypeOf((*MockTransactionRepository)(nil).CountAll), ctx, opts)
}

// GetByID mocks base method.
func (m *MockTransactionRepository) GetByID(ctx context.Context, id uint64) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTransactionRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTransactionRepository)(nil).GetByID), ctx, id)
}

// GetByTransactionID mocks base method.
func (m *MockTransactionRepository) GetByTransactionID(ctx context.Context, transactionId string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionID", ctx, transactionId)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionID indicates an expected call of GetByTransactionID.
func (mr *MockTransactionRepositoryMockRecorder) GetByTransactionID(ctx, transactionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionID", reflect.TypeOf((*MockTransactionRepository)(nil).GetByTransactionID), ctx, transactionId)
}

// GetByTransactionTypeAndRefNumber mocks base method.
func (m *MockTransactionRepository) GetByTransactionTypeAndRefNumber(ctx context.Context, req *models.TransactionGetByTypeAndRefNumberRequest) (*models.GetTransactionOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionTypeAndRefNumber", ctx, req)
	ret0, _ := ret[0].(*models.GetTransactionOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionTypeAndRefNumber indicates an expected call of GetByTransactionTypeAndRefNumber.
func (mr *MockTransactionRepositoryMockRecorder) GetByTransactionTypeAndRefNumber(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionTypeAndRefNumber", reflect.TypeOf((*MockTransactionRepository)(nil).GetByTransactionTypeAndRefNumber), ctx, req)
}

// GetList mocks base method.
func (m *MockTransactionRepository) GetList(ctx context.Context, opts models.TransactionFilterOptions) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, opts)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockTransactionRepositoryMockRecorder) GetList(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockTransactionRepository)(nil).GetList), ctx, opts)
}

// GetReportRepayment mocks base method.
func (m *MockTransactionRepository) GetReportRepayment(ctx context.Context, startDate, endDate time.Time) ([]models.ReportRepayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportRepayment", ctx, startDate, endDate)
	ret0, _ := ret[0].([]models.ReportRepayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportRepayment indicates an expected call of GetReportRepayment.
func (mr *MockTransactionRepositoryMockRecorder) GetReportRepayment(ctx, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportRepayment", reflect.TypeOf((*MockTransactionRepository)(nil).GetReportRepayment), ctx, startDate, endDate)
}

// GetStatusCount mocks base method.
func (m *MockTransactionRepository) GetStatusCount(ctx context.Context, threshold uint, opts models.TransactionFilterOptions) (models.StatusCountTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusCount", ctx, threshold, opts)
	ret0, _ := ret[0].(models.StatusCountTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatusCount indicates an expected call of GetStatusCount.
func (mr *MockTransactionRepositoryMockRecorder) GetStatusCount(ctx, threshold, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusCount", reflect.TypeOf((*MockTransactionRepository)(nil).GetStatusCount), ctx, threshold, opts)
}

// GetTrxId mocks base method.
func (m *MockTransactionRepository) GetTrxId(ctx context.Context, id int64) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrxId", ctx, id)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrxId indicates an expected call of GetTrxId.
func (mr *MockTransactionRepositoryMockRecorder) GetTrxId(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrxId", reflect.TypeOf((*MockTransactionRepository)(nil).GetTrxId), ctx, id)
}

// Store mocks base method.
func (m *MockTransactionRepository) Store(ctx context.Context, en *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, en)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockTransactionRepositoryMockRecorder) Store(ctx, en any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockTransactionRepository)(nil).Store), ctx, en)
}

// StoreBulkTransaction mocks base method.
func (m *MockTransactionRepository) StoreBulkTransaction(ctx context.Context, en []*models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBulkTransaction", ctx, en)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBulkTransaction indicates an expected call of StoreBulkTransaction.
func (mr *MockTransactionRepositoryMockRecorder) StoreBulkTransaction(ctx, en any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBulkTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).StoreBulkTransaction), ctx, en)
}

// StreamAll mocks base method.
func (m *MockTransactionRepository) StreamAll(ctx context.Context, opts models.TransactionFilterOptions) <-chan models.TransactionStreamResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamAll", ctx, opts)
	ret0, _ := ret[0].(<-chan models.TransactionStreamResult)
	return ret0
}

// StreamAll indicates an expected call of StreamAll.
func (mr *MockTransactionRepositoryMockRecorder) StreamAll(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamAll", reflect.TypeOf((*MockTransactionRepository)(nil).StreamAll), ctx, opts)
}

// UpdateStatus mocks base method.
func (m *MockTransactionRepository) UpdateStatus(ctx context.Context, id uint64, status string) (*models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(*models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockTransactionRepositoryMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateStatus), ctx, id, status)
}
