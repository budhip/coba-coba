// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_account.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_account.go -destination=./internal/repositories/mock/sql_account_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// CheckAccountNumbers mocks base method.
func (m *MockAccountRepository) CheckAccountNumbers(ctx context.Context, accountNumbers []string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccountNumbers", ctx, accountNumbers)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAccountNumbers indicates an expected call of CheckAccountNumbers.
func (mr *MockAccountRepositoryMockRecorder) CheckAccountNumbers(ctx, accountNumbers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccountNumbers", reflect.TypeOf((*MockAccountRepository)(nil).CheckAccountNumbers), ctx, accountNumbers)
}

// CheckDataByID mocks base method.
func (m *MockAccountRepository) CheckDataByID(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDataByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDataByID indicates an expected call of CheckDataByID.
func (mr *MockAccountRepositoryMockRecorder) CheckDataByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDataByID", reflect.TypeOf((*MockAccountRepository)(nil).CheckDataByID), ctx, id)
}

// CountAll mocks base method.
func (m *MockAccountRepository) CountAll(ctx context.Context, opts models.AccountFilterOptions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAll", ctx, opts)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAll indicates an expected call of CountAll.
func (mr *MockAccountRepositoryMockRecorder) CountAll(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAll", reflect.TypeOf((*MockAccountRepository)(nil).CountAll), ctx, opts)
}

// Create mocks base method.
func (m *MockAccountRepository) Create(ctx context.Context, in models.CreateAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepository)(nil).Create), ctx, in)
}

// Delete mocks base method.
func (m *MockAccountRepository) Delete(ctx context.Context, accountID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountRepositoryMockRecorder) Delete(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountRepository)(nil).Delete), ctx, accountID)
}

// DeleteByAccountNumber mocks base method.
func (m *MockAccountRepository) DeleteByAccountNumber(ctx context.Context, accountNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByAccountNumber", ctx, accountNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByAccountNumber indicates an expected call of DeleteByAccountNumber.
func (mr *MockAccountRepositoryMockRecorder) DeleteByAccountNumber(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByAccountNumber", reflect.TypeOf((*MockAccountRepository)(nil).DeleteByAccountNumber), ctx, accountNumber)
}

// GetAccountBalances mocks base method.
func (m *MockAccountRepository) GetAccountBalances(ctx context.Context, req models.GetAccountBalanceRequest) (map[string]models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalances", ctx, req)
	ret0, _ := ret[0].(map[string]models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountBalances indicates an expected call of GetAccountBalances.
func (mr *MockAccountRepositoryMockRecorder) GetAccountBalances(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalances", reflect.TypeOf((*MockAccountRepository)(nil).GetAccountBalances), ctx, req)
}

// GetAllByAccountNumbers mocks base method.
func (m *MockAccountRepository) GetAllByAccountNumbers(ctx context.Context, accountNumbers []string) ([]models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByAccountNumbers", ctx, accountNumbers)
	ret0, _ := ret[0].([]models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByAccountNumbers indicates an expected call of GetAllByAccountNumbers.
func (mr *MockAccountRepositoryMockRecorder) GetAllByAccountNumbers(ctx, accountNumbers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByAccountNumbers", reflect.TypeOf((*MockAccountRepository)(nil).GetAllByAccountNumbers), ctx, accountNumbers)
}

// GetAllWithoutPagination mocks base method.
func (m *MockAccountRepository) GetAllWithoutPagination(ctx context.Context) (*[]models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWithoutPagination", ctx)
	ret0, _ := ret[0].(*[]models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWithoutPagination indicates an expected call of GetAllWithoutPagination.
func (mr *MockAccountRepositoryMockRecorder) GetAllWithoutPagination(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWithoutPagination", reflect.TypeOf((*MockAccountRepository)(nil).GetAllWithoutPagination), ctx)
}

// GetCachedAccount mocks base method.
func (m *MockAccountRepository) GetCachedAccount(ctx context.Context, accountNumber string) (models.GetAccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCachedAccount", ctx, accountNumber)
	ret0, _ := ret[0].(models.GetAccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCachedAccount indicates an expected call of GetCachedAccount.
func (mr *MockAccountRepositoryMockRecorder) GetCachedAccount(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCachedAccount", reflect.TypeOf((*MockAccountRepository)(nil).GetCachedAccount), ctx, accountNumber)
}

// GetList mocks base method.
func (m *MockAccountRepository) GetList(ctx context.Context, opts models.AccountFilterOptions) ([]models.GetAccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, opts)
	ret0, _ := ret[0].([]models.GetAccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockAccountRepositoryMockRecorder) GetList(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockAccountRepository)(nil).GetList), ctx, opts)
}

// GetOneByAccountNumber mocks base method.
func (m *MockAccountRepository) GetOneByAccountNumber(ctx context.Context, accountNumber string) (models.GetAccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByAccountNumber", ctx, accountNumber)
	ret0, _ := ret[0].(models.GetAccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByAccountNumber indicates an expected call of GetOneByAccountNumber.
func (mr *MockAccountRepositoryMockRecorder) GetOneByAccountNumber(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByAccountNumber", reflect.TypeOf((*MockAccountRepository)(nil).GetOneByAccountNumber), ctx, accountNumber)
}

// GetOneByAccountNumberOrLegacyId mocks base method.
func (m *MockAccountRepository) GetOneByAccountNumberOrLegacyId(ctx context.Context, accountNumber string) (models.GetAccountOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByAccountNumberOrLegacyId", ctx, accountNumber)
	ret0, _ := ret[0].(models.GetAccountOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByAccountNumberOrLegacyId indicates an expected call of GetOneByAccountNumberOrLegacyId.
func (mr *MockAccountRepositoryMockRecorder) GetOneByAccountNumberOrLegacyId(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByAccountNumberOrLegacyId", reflect.TypeOf((*MockAccountRepository)(nil).GetOneByAccountNumberOrLegacyId), ctx, accountNumber)
}

// GetOneByLegacyId mocks base method.
func (m *MockAccountRepository) GetOneByLegacyId(ctx context.Context, legacyId string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByLegacyId", ctx, legacyId)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByLegacyId indicates an expected call of GetOneByLegacyId.
func (mr *MockAccountRepositoryMockRecorder) GetOneByLegacyId(ctx, legacyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByLegacyId", reflect.TypeOf((*MockAccountRepository)(nil).GetOneByLegacyId), ctx, legacyId)
}

// GetTotalBalance mocks base method.
func (m *MockAccountRepository) GetTotalBalance(ctx context.Context, opts models.AccountFilterOptions) (*decimal.Decimal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalBalance", ctx, opts)
	ret0, _ := ret[0].(*decimal.Decimal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalBalance indicates an expected call of GetTotalBalance.
func (mr *MockAccountRepositoryMockRecorder) GetTotalBalance(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalBalance", reflect.TypeOf((*MockAccountRepository)(nil).GetTotalBalance), ctx, opts)
}

// Update mocks base method.
func (m *MockAccountRepository) Update(ctx context.Context, id int, newData models.UpdateAccountIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, newData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountRepositoryMockRecorder) Update(ctx, id, newData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountRepository)(nil).Update), ctx, id, newData)
}

// UpdateAccountBalance mocks base method.
func (m *MockAccountRepository) UpdateAccountBalance(ctx context.Context, accountNumber string, balance models.Balance) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountBalance", ctx, accountNumber, balance)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountBalance indicates an expected call of UpdateAccountBalance.
func (mr *MockAccountRepositoryMockRecorder) UpdateAccountBalance(ctx, accountNumber, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountBalance", reflect.TypeOf((*MockAccountRepository)(nil).UpdateAccountBalance), ctx, accountNumber, balance)
}

// UpdateBySubCategory mocks base method.
func (m *MockAccountRepository) UpdateBySubCategory(ctx context.Context, in models.UpdateAccountBySubCategoryIn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBySubCategory", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBySubCategory indicates an expected call of UpdateBySubCategory.
func (mr *MockAccountRepositoryMockRecorder) UpdateBySubCategory(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBySubCategory", reflect.TypeOf((*MockAccountRepository)(nil).UpdateBySubCategory), ctx, in)
}

// Upsert mocks base method.
func (m *MockAccountRepository) Upsert(ctx context.Context, en models.AccountUpsert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, en)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockAccountRepositoryMockRecorder) Upsert(ctx, en any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockAccountRepository)(nil).Upsert), ctx, en)
}
