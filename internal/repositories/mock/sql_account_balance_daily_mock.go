// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_account_balance_daily.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_account_balance_daily.go -destination=./internal/repositories/mock/sql_account_balance_daily_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountBalanceDailyRepository is a mock of AccountBalanceDailyRepository interface.
type MockAccountBalanceDailyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountBalanceDailyRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountBalanceDailyRepositoryMockRecorder is the mock recorder for MockAccountBalanceDailyRepository.
type MockAccountBalanceDailyRepositoryMockRecorder struct {
	mock *MockAccountBalanceDailyRepository
}

// NewMockAccountBalanceDailyRepository creates a new mock instance.
func NewMockAccountBalanceDailyRepository(ctrl *gomock.Controller) *MockAccountBalanceDailyRepository {
	mock := &MockAccountBalanceDailyRepository{ctrl: ctrl}
	mock.recorder = &MockAccountBalanceDailyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountBalanceDailyRepository) EXPECT() *MockAccountBalanceDailyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountBalanceDailyRepository) Create(ctx context.Context, in *[]models.AccountBalanceDaily) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountBalanceDailyRepositoryMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountBalanceDailyRepository)(nil).Create), ctx, in)
}

// GetLast mocks base method.
func (m *MockAccountBalanceDailyRepository) GetLast(ctx context.Context) (*models.AccountBalanceDaily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLast", ctx)
	ret0, _ := ret[0].(*models.AccountBalanceDaily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLast indicates an expected call of GetLast.
func (mr *MockAccountBalanceDailyRepositoryMockRecorder) GetLast(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLast", reflect.TypeOf((*MockAccountBalanceDailyRepository)(nil).GetLast), ctx)
}

// ListByDate mocks base method.
func (m *MockAccountBalanceDailyRepository) ListByDate(ctx context.Context, date time.Time) (*[]models.AccountBalanceDaily, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByDate", ctx, date)
	ret0, _ := ret[0].(*[]models.AccountBalanceDaily)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByDate indicates an expected call of ListByDate.
func (mr *MockAccountBalanceDailyRepositoryMockRecorder) ListByDate(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByDate", reflect.TypeOf((*MockAccountBalanceDailyRepository)(nil).ListByDate), ctx, date)
}
