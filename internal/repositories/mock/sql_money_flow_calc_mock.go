// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_money_flow_calc.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_money_flow_calc.go -destination=./internal/repositories/mock/sql_money_flow_calc_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMoneyFlowRepository is a mock of MoneyFlowRepository interface.
type MockMoneyFlowRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMoneyFlowRepositoryMockRecorder
	isgomock struct{}
}

// MockMoneyFlowRepositoryMockRecorder is the mock recorder for MockMoneyFlowRepository.
type MockMoneyFlowRepositoryMockRecorder struct {
	mock *MockMoneyFlowRepository
}

// NewMockMoneyFlowRepository creates a new mock instance.
func NewMockMoneyFlowRepository(ctrl *gomock.Controller) *MockMoneyFlowRepository {
	mock := &MockMoneyFlowRepository{ctrl: ctrl}
	mock.recorder = &MockMoneyFlowRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMoneyFlowRepository) EXPECT() *MockMoneyFlowRepositoryMockRecorder {
	return m.recorder
}

// CountSummaryAll mocks base method.
func (m *MockMoneyFlowRepository) CountSummaryAll(ctx context.Context, opts models.MoneyFlowSummaryFilterOptions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSummaryAll", ctx, opts)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSummaryAll indicates an expected call of CountSummaryAll.
func (mr *MockMoneyFlowRepositoryMockRecorder) CountSummaryAll(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSummaryAll", reflect.TypeOf((*MockMoneyFlowRepository)(nil).CountSummaryAll), ctx, opts)
}

// CreateDetailedSummary mocks base method.
func (m *MockMoneyFlowRepository) CreateDetailedSummary(ctx context.Context, in models.CreateDetailedMoneyFlowSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDetailedSummary", ctx, in)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDetailedSummary indicates an expected call of CreateDetailedSummary.
func (mr *MockMoneyFlowRepositoryMockRecorder) CreateDetailedSummary(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDetailedSummary", reflect.TypeOf((*MockMoneyFlowRepository)(nil).CreateDetailedSummary), ctx, in)
}

// CreateSummary mocks base method.
func (m *MockMoneyFlowRepository) CreateSummary(ctx context.Context, in models.CreateMoneyFlowSummary) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSummary", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSummary indicates an expected call of CreateSummary.
func (mr *MockMoneyFlowRepositoryMockRecorder) CreateSummary(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSummary", reflect.TypeOf((*MockMoneyFlowRepository)(nil).CreateSummary), ctx, in)
}

// GetSummariesList mocks base method.
func (m *MockMoneyFlowRepository) GetSummariesList(ctx context.Context, opts models.MoneyFlowSummaryFilterOptions) ([]models.MoneyFlowSummaryOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummariesList", ctx, opts)
	ret0, _ := ret[0].([]models.MoneyFlowSummaryOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummariesList indicates an expected call of GetSummariesList.
func (mr *MockMoneyFlowRepositoryMockRecorder) GetSummariesList(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummariesList", reflect.TypeOf((*MockMoneyFlowRepository)(nil).GetSummariesList), ctx, opts)
}

// GetSummaryDetailBySummaryID mocks base method.
func (m *MockMoneyFlowRepository) GetSummaryDetailBySummaryID(ctx context.Context, summaryID string) (models.MoneyFlowSummaryDetailBySummaryIDOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaryDetailBySummaryID", ctx, summaryID)
	ret0, _ := ret[0].(models.MoneyFlowSummaryDetailBySummaryIDOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaryDetailBySummaryID indicates an expected call of GetSummaryDetailBySummaryID.
func (mr *MockMoneyFlowRepositoryMockRecorder) GetSummaryDetailBySummaryID(ctx, summaryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaryDetailBySummaryID", reflect.TypeOf((*MockMoneyFlowRepository)(nil).GetSummaryDetailBySummaryID), ctx, summaryID)
}

// GetSummaryIDByPapaTransactionID mocks base method.
func (m *MockMoneyFlowRepository) GetSummaryIDByPapaTransactionID(ctx context.Context, papaTransactionID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaryIDByPapaTransactionID", ctx, papaTransactionID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaryIDByPapaTransactionID indicates an expected call of GetSummaryIDByPapaTransactionID.
func (mr *MockMoneyFlowRepositoryMockRecorder) GetSummaryIDByPapaTransactionID(ctx, papaTransactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaryIDByPapaTransactionID", reflect.TypeOf((*MockMoneyFlowRepository)(nil).GetSummaryIDByPapaTransactionID), ctx, papaTransactionID)
}

// GetTransactionProcessed mocks base method.
func (m *MockMoneyFlowRepository) GetTransactionProcessed(ctx context.Context, breakdownTransactionsFrom string, transactionSourceDate time.Time) (*models.MoneyFlowTransactionProcessed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionProcessed", ctx, breakdownTransactionsFrom, transactionSourceDate)
	ret0, _ := ret[0].(*models.MoneyFlowTransactionProcessed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionProcessed indicates an expected call of GetTransactionProcessed.
func (mr *MockMoneyFlowRepositoryMockRecorder) GetTransactionProcessed(ctx, breakdownTransactionsFrom, transactionSourceDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionProcessed", reflect.TypeOf((*MockMoneyFlowRepository)(nil).GetTransactionProcessed), ctx, breakdownTransactionsFrom, transactionSourceDate)
}

// UpdateSummary mocks base method.
func (m *MockMoneyFlowRepository) UpdateSummary(ctx context.Context, summaryID string, update models.MoneyFlowSummaryUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSummary", ctx, summaryID, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSummary indicates an expected call of UpdateSummary.
func (mr *MockMoneyFlowRepositoryMockRecorder) UpdateSummary(ctx, summaryID, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSummary", reflect.TypeOf((*MockMoneyFlowRepository)(nil).UpdateSummary), ctx, summaryID, update)
}
