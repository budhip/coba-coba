// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_feature.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_feature.go -destination=./internal/repositories/mock/sql_feature_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFeatureRepository is a mock of FeatureRepository interface.
type MockFeatureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureRepositoryMockRecorder
	isgomock struct{}
}

// MockFeatureRepositoryMockRecorder is the mock recorder for MockFeatureRepository.
type MockFeatureRepositoryMockRecorder struct {
	mock *MockFeatureRepository
}

// NewMockFeatureRepository creates a new mock instance.
func NewMockFeatureRepository(ctrl *gomock.Controller) *MockFeatureRepository {
	mock := &MockFeatureRepository{ctrl: ctrl}
	mock.recorder = &MockFeatureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureRepository) EXPECT() *MockFeatureRepositoryMockRecorder {
	return m.recorder
}

// GetFeatureByAccountNumbers mocks base method.
func (m *MockFeatureRepository) GetFeatureByAccountNumbers(ctx context.Context, accountNumbers []string) (models.MapAccountFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureByAccountNumbers", ctx, accountNumbers)
	ret0, _ := ret[0].(models.MapAccountFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureByAccountNumbers indicates an expected call of GetFeatureByAccountNumbers.
func (mr *MockFeatureRepositoryMockRecorder) GetFeatureByAccountNumbers(ctx, accountNumbers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureByAccountNumbers", reflect.TypeOf((*MockFeatureRepository)(nil).GetFeatureByAccountNumbers), ctx, accountNumbers)
}

// Register mocks base method.
func (m *MockFeatureRepository) Register(arg0 context.Context, arg1 *models.CreateWalletIn) (models.WalletOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(models.WalletOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockFeatureRepositoryMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockFeatureRepository)(nil).Register), arg0, arg1)
}

// Update mocks base method.
func (m *MockFeatureRepository) Update(arg0 context.Context, arg1 *models.UpdateWalletIn) (models.WalletOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(models.WalletOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFeatureRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFeatureRepository)(nil).Update), arg0, arg1)
}
