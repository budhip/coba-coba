// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_wallet_transaction.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_wallet_transaction.go -destination=./internal/repositories/mock/sql_wallet_transaction_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletTransactionRepository is a mock of WalletTransactionRepository interface.
type MockWalletTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockWalletTransactionRepositoryMockRecorder is the mock recorder for MockWalletTransactionRepository.
type MockWalletTransactionRepositoryMockRecorder struct {
	mock *MockWalletTransactionRepository
}

// NewMockWalletTransactionRepository creates a new mock instance.
func NewMockWalletTransactionRepository(ctrl *gomock.Controller) *MockWalletTransactionRepository {
	mock := &MockWalletTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockWalletTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletTransactionRepository) EXPECT() *MockWalletTransactionRepositoryMockRecorder {
	return m.recorder
}

// CountAll mocks base method.
func (m *MockWalletTransactionRepository) CountAll(ctx context.Context, opts models.WalletTrxFilterOptions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAll", ctx, opts)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAll indicates an expected call of CountAll.
func (mr *MockWalletTransactionRepositoryMockRecorder) CountAll(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAll", reflect.TypeOf((*MockWalletTransactionRepository)(nil).CountAll), ctx, opts)
}

// Create mocks base method.
func (m *MockWalletTransactionRepository) Create(ctx context.Context, in models.NewWalletTransaction) (*models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockWalletTransactionRepositoryMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletTransactionRepository)(nil).Create), ctx, in)
}

// GetById mocks base method.
func (m *MockWalletTransactionRepository) GetById(ctx context.Context, id string) (*models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockWalletTransactionRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockWalletTransactionRepository)(nil).GetById), ctx, id)
}

// GetByRefNumber mocks base method.
func (m *MockWalletTransactionRepository) GetByRefNumber(ctx context.Context, refNumber string) (*models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRefNumber", ctx, refNumber)
	ret0, _ := ret[0].(*models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRefNumber indicates an expected call of GetByRefNumber.
func (mr *MockWalletTransactionRepositoryMockRecorder) GetByRefNumber(ctx, refNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRefNumber", reflect.TypeOf((*MockWalletTransactionRepository)(nil).GetByRefNumber), ctx, refNumber)
}

// List mocks base method.
func (m *MockWalletTransactionRepository) List(ctx context.Context, opts models.WalletTrxFilterOptions) ([]models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWalletTransactionRepositoryMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWalletTransactionRepository)(nil).List), ctx, opts)
}

// Update mocks base method.
func (m *MockWalletTransactionRepository) Update(ctx context.Context, id string, data models.WalletTransactionUpdate) (*models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, data)
	ret0, _ := ret[0].(*models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockWalletTransactionRepositoryMockRecorder) Update(ctx, id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWalletTransactionRepository)(nil).Update), ctx, id, data)
}
