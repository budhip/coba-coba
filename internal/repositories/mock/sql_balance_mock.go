// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_balance.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_balance.go -destination=./internal/repositories/mock/sql_balance_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBalanceRepository is a mock of BalanceRepository interface.
type MockBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceRepositoryMockRecorder
	isgomock struct{}
}

// MockBalanceRepositoryMockRecorder is the mock recorder for MockBalanceRepository.
type MockBalanceRepositoryMockRecorder struct {
	mock *MockBalanceRepository
}

// NewMockBalanceRepository creates a new mock instance.
func NewMockBalanceRepository(ctrl *gomock.Controller) *MockBalanceRepository {
	mock := &MockBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceRepository) EXPECT() *MockBalanceRepositoryMockRecorder {
	return m.recorder
}

// AdjustAccountBalance mocks base method.
func (m *MockBalanceRepository) AdjustAccountBalance(ctx context.Context, accountNumber string, updatedAmount models.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdjustAccountBalance", ctx, accountNumber, updatedAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdjustAccountBalance indicates an expected call of AdjustAccountBalance.
func (mr *MockBalanceRepositoryMockRecorder) AdjustAccountBalance(ctx, accountNumber, updatedAmount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdjustAccountBalance", reflect.TypeOf((*MockBalanceRepository)(nil).AdjustAccountBalance), ctx, accountNumber, updatedAmount)
}

// Get mocks base method.
func (m *MockBalanceRepository) Get(ctx context.Context, accountNumber string) (models.AccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, accountNumber)
	ret0, _ := ret[0].(models.AccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBalanceRepositoryMockRecorder) Get(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBalanceRepository)(nil).Get), ctx, accountNumber)
}

// GetMany mocks base method.
func (m *MockBalanceRepository) GetMany(ctx context.Context, req models.GetAccountBalanceRequest) ([]models.AccountBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", ctx, req)
	ret0, _ := ret[0].([]models.AccountBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockBalanceRepositoryMockRecorder) GetMany(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockBalanceRepository)(nil).GetMany), ctx, req)
}
