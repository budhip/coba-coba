// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/account_config_internal.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/account_config_internal.go -destination=./internal/repositories/mock/account_config_internal_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAccountConfigRepository is a mock of AccountConfigRepository interface.
type MockAccountConfigRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountConfigRepositoryMockRecorder
	isgomock struct{}
}

// MockAccountConfigRepositoryMockRecorder is the mock recorder for MockAccountConfigRepository.
type MockAccountConfigRepositoryMockRecorder struct {
	mock *MockAccountConfigRepository
}

// NewMockAccountConfigRepository creates a new mock instance.
func NewMockAccountConfigRepository(ctrl *gomock.Controller) *MockAccountConfigRepository {
	mock := &MockAccountConfigRepository{ctrl: ctrl}
	mock.recorder = &MockAccountConfigRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountConfigRepository) EXPECT() *MockAccountConfigRepositoryMockRecorder {
	return m.recorder
}

// GetAdminFee mocks base method.
func (m *MockAccountConfigRepository) GetAdminFee(ctx context.Context, loanAccountNumber, loanKind string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminFee", ctx, loanAccountNumber, loanKind)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminFee indicates an expected call of GetAdminFee.
func (mr *MockAccountConfigRepositoryMockRecorder) GetAdminFee(ctx, loanAccountNumber, loanKind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminFee", reflect.TypeOf((*MockAccountConfigRepository)(nil).GetAdminFee), ctx, loanAccountNumber, loanKind)
}

// GetRevenue mocks base method.
func (m *MockAccountConfigRepository) GetRevenue(ctx context.Context, loanAccountNumber, loanType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevenue", ctx, loanAccountNumber, loanType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevenue indicates an expected call of GetRevenue.
func (mr *MockAccountConfigRepositoryMockRecorder) GetRevenue(ctx, loanAccountNumber, loanType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevenue", reflect.TypeOf((*MockAccountConfigRepository)(nil).GetRevenue), ctx, loanAccountNumber, loanType)
}

// GetVatOut mocks base method.
func (m *MockAccountConfigRepository) GetVatOut(ctx context.Context, loanAccountNumber, loanType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVatOut", ctx, loanAccountNumber, loanType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVatOut indicates an expected call of GetVatOut.
func (mr *MockAccountConfigRepositoryMockRecorder) GetVatOut(ctx, loanAccountNumber, loanType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVatOut", reflect.TypeOf((*MockAccountConfigRepository)(nil).GetVatOut), ctx, loanAccountNumber, loanType)
}

// GetWht2326 mocks base method.
func (m *MockAccountConfigRepository) GetWht2326(ctx context.Context, loanAccountNumber, loanType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWht2326", ctx, loanAccountNumber, loanType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWht2326 indicates an expected call of GetWht2326.
func (mr *MockAccountConfigRepositoryMockRecorder) GetWht2326(ctx, loanAccountNumber, loanType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWht2326", reflect.TypeOf((*MockAccountConfigRepository)(nil).GetWht2326), ctx, loanAccountNumber, loanType)
}
