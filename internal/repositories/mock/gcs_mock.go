// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/gcs.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/gcs.go -destination=./internal/repositories/mock/gcs_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudStorageRepository is a mock of CloudStorageRepository interface.
type MockCloudStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCloudStorageRepositoryMockRecorder
	isgomock struct{}
}

// MockCloudStorageRepositoryMockRecorder is the mock recorder for MockCloudStorageRepository.
type MockCloudStorageRepositoryMockRecorder struct {
	mock *MockCloudStorageRepository
}

// NewMockCloudStorageRepository creates a new mock instance.
func NewMockCloudStorageRepository(ctrl *gomock.Controller) *MockCloudStorageRepository {
	mock := &MockCloudStorageRepository{ctrl: ctrl}
	mock.recorder = &MockCloudStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudStorageRepository) EXPECT() *MockCloudStorageRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloudStorageRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloudStorageRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloudStorageRepository)(nil).Close))
}

// DeleteFile mocks base method.
func (m *MockCloudStorageRepository) DeleteFile(ctx context.Context, payload *models.CloudStoragePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockCloudStorageRepositoryMockRecorder) DeleteFile(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockCloudStorageRepository)(nil).DeleteFile), ctx, payload)
}

// GetSignedURL mocks base method.
func (m *MockCloudStorageRepository) GetSignedURL(filePath string, expireDuration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedURL", filePath, expireDuration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedURL indicates an expected call of GetSignedURL.
func (mr *MockCloudStorageRepositoryMockRecorder) GetSignedURL(filePath, expireDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedURL", reflect.TypeOf((*MockCloudStorageRepository)(nil).GetSignedURL), filePath, expireDuration)
}

// GetURL mocks base method.
func (m *MockCloudStorageRepository) GetURL(payload *models.CloudStoragePayload) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", payload)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockCloudStorageRepositoryMockRecorder) GetURL(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockCloudStorageRepository)(nil).GetURL), payload)
}

// IsObjectExist mocks base method.
func (m *MockCloudStorageRepository) IsObjectExist(ctx context.Context, payload *models.CloudStoragePayload) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsObjectExist", ctx, payload)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// IsObjectExist indicates an expected call of IsObjectExist.
func (mr *MockCloudStorageRepositoryMockRecorder) IsObjectExist(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsObjectExist", reflect.TypeOf((*MockCloudStorageRepository)(nil).IsObjectExist), ctx, payload)
}

// NewReader mocks base method.
func (m *MockCloudStorageRepository) NewReader(ctx context.Context, payload *models.CloudStoragePayload) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", ctx, payload)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader.
func (mr *MockCloudStorageRepositoryMockRecorder) NewReader(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockCloudStorageRepository)(nil).NewReader), ctx, payload)
}

// NewReaderBucketCustom mocks base method.
func (m *MockCloudStorageRepository) NewReaderBucketCustom(ctx context.Context, bucket, dirFileName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReaderBucketCustom", ctx, bucket, dirFileName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReaderBucketCustom indicates an expected call of NewReaderBucketCustom.
func (mr *MockCloudStorageRepositoryMockRecorder) NewReaderBucketCustom(ctx, bucket, dirFileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReaderBucketCustom", reflect.TypeOf((*MockCloudStorageRepository)(nil).NewReaderBucketCustom), ctx, bucket, dirFileName)
}

// NewWriter mocks base method.
func (m *MockCloudStorageRepository) NewWriter(ctx context.Context, payload *models.CloudStoragePayload) io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriter", ctx, payload)
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// NewWriter indicates an expected call of NewWriter.
func (mr *MockCloudStorageRepositoryMockRecorder) NewWriter(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriter", reflect.TypeOf((*MockCloudStorageRepository)(nil).NewWriter), ctx, payload)
}

// NewWriterCustom mocks base method.
func (m *MockCloudStorageRepository) NewWriterCustom(ctx context.Context, bucketName string, payload *models.CloudStoragePayload) io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWriterCustom", ctx, bucketName, payload)
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// NewWriterCustom indicates an expected call of NewWriterCustom.
func (mr *MockCloudStorageRepositoryMockRecorder) NewWriterCustom(ctx, bucketName, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWriterCustom", reflect.TypeOf((*MockCloudStorageRepository)(nil).NewWriterCustom), ctx, bucketName, payload)
}

// WriteStream mocks base method.
func (m *MockCloudStorageRepository) WriteStream(ctx context.Context, payload *models.CloudStoragePayload, data <-chan []byte) models.WriteStreamResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStream", ctx, payload, data)
	ret0, _ := ret[0].(models.WriteStreamResult)
	return ret0
}

// WriteStream indicates an expected call of WriteStream.
func (mr *MockCloudStorageRepositoryMockRecorder) WriteStream(ctx, payload, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStream", reflect.TypeOf((*MockCloudStorageRepository)(nil).WriteStream), ctx, payload, data)
}

// WriteStreamCustomBucket mocks base method.
func (m *MockCloudStorageRepository) WriteStreamCustomBucket(ctx context.Context, bucketName string, payload *models.CloudStoragePayload, data <-chan []byte) models.WriteStreamResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteStreamCustomBucket", ctx, bucketName, payload, data)
	ret0, _ := ret[0].(models.WriteStreamResult)
	return ret0
}

// WriteStreamCustomBucket indicates an expected call of WriteStreamCustomBucket.
func (mr *MockCloudStorageRepositoryMockRecorder) WriteStreamCustomBucket(ctx, bucketName, payload, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStreamCustomBucket", reflect.TypeOf((*MockCloudStorageRepository)(nil).WriteStreamCustomBucket), ctx, bucketName, payload, data)
}
