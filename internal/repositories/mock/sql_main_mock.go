// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_main.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_main.go -destination=./internal/repositories/mock/sql_main_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repositories "bitbucket.org/Amartha/go-fp-transaction/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockSQLRepository is a mock of SQLRepository interface.
type MockSQLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSQLRepositoryMockRecorder
	isgomock struct{}
}

// MockSQLRepositoryMockRecorder is the mock recorder for MockSQLRepository.
type MockSQLRepositoryMockRecorder struct {
	mock *MockSQLRepository
}

// NewMockSQLRepository creates a new mock instance.
func NewMockSQLRepository(ctrl *gomock.Controller) *MockSQLRepository {
	mock := &MockSQLRepository{ctrl: ctrl}
	mock.recorder = &MockSQLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQLRepository) EXPECT() *MockSQLRepositoryMockRecorder {
	return m.recorder
}

// Atomic mocks base method.
func (m *MockSQLRepository) Atomic(ctx context.Context, steps func(context.Context, repositories.SQLRepository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Atomic", ctx, steps)
	ret0, _ := ret[0].(error)
	return ret0
}

// Atomic indicates an expected call of Atomic.
func (mr *MockSQLRepositoryMockRecorder) Atomic(ctx, steps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Atomic", reflect.TypeOf((*MockSQLRepository)(nil).Atomic), ctx, steps)
}

// DisableIndexScan mocks base method.
func (m *MockSQLRepository) DisableIndexScan(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableIndexScan", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableIndexScan indicates an expected call of DisableIndexScan.
func (mr *MockSQLRepositoryMockRecorder) DisableIndexScan(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableIndexScan", reflect.TypeOf((*MockSQLRepository)(nil).DisableIndexScan), ctx)
}

// GetAccountBalanceDailyRepository mocks base method.
func (m *MockSQLRepository) GetAccountBalanceDailyRepository() repositories.AccountBalanceDailyRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountBalanceDailyRepository")
	ret0, _ := ret[0].(repositories.AccountBalanceDailyRepository)
	return ret0
}

// GetAccountBalanceDailyRepository indicates an expected call of GetAccountBalanceDailyRepository.
func (mr *MockSQLRepositoryMockRecorder) GetAccountBalanceDailyRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountBalanceDailyRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetAccountBalanceDailyRepository))
}

// GetAccountConfigExternalRepository mocks base method.
func (m *MockSQLRepository) GetAccountConfigExternalRepository() repositories.AccountConfigRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountConfigExternalRepository")
	ret0, _ := ret[0].(repositories.AccountConfigRepository)
	return ret0
}

// GetAccountConfigExternalRepository indicates an expected call of GetAccountConfigExternalRepository.
func (mr *MockSQLRepositoryMockRecorder) GetAccountConfigExternalRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountConfigExternalRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetAccountConfigExternalRepository))
}

// GetAccountConfigInternalRepository mocks base method.
func (m *MockSQLRepository) GetAccountConfigInternalRepository() repositories.AccountConfigRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountConfigInternalRepository")
	ret0, _ := ret[0].(repositories.AccountConfigRepository)
	return ret0
}

// GetAccountConfigInternalRepository indicates an expected call of GetAccountConfigInternalRepository.
func (mr *MockSQLRepositoryMockRecorder) GetAccountConfigInternalRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountConfigInternalRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetAccountConfigInternalRepository))
}

// GetAccountRepository mocks base method.
func (m *MockSQLRepository) GetAccountRepository() repositories.AccountRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountRepository")
	ret0, _ := ret[0].(repositories.AccountRepository)
	return ret0
}

// GetAccountRepository indicates an expected call of GetAccountRepository.
func (mr *MockSQLRepositoryMockRecorder) GetAccountRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetAccountRepository))
}

// GetBalanceRepository mocks base method.
func (m *MockSQLRepository) GetBalanceRepository() repositories.BalanceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceRepository")
	ret0, _ := ret[0].(repositories.BalanceRepository)
	return ret0
}

// GetBalanceRepository indicates an expected call of GetBalanceRepository.
func (mr *MockSQLRepositoryMockRecorder) GetBalanceRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetBalanceRepository))
}

// GetCategoryRepository mocks base method.
func (m *MockSQLRepository) GetCategoryRepository() repositories.CategoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryRepository")
	ret0, _ := ret[0].(repositories.CategoryRepository)
	return ret0
}

// GetCategoryRepository indicates an expected call of GetCategoryRepository.
func (mr *MockSQLRepositoryMockRecorder) GetCategoryRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetCategoryRepository))
}

// GetEntityRepository mocks base method.
func (m *MockSQLRepository) GetEntityRepository() repositories.EntityRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityRepository")
	ret0, _ := ret[0].(repositories.EntityRepository)
	return ret0
}

// GetEntityRepository indicates an expected call of GetEntityRepository.
func (mr *MockSQLRepositoryMockRecorder) GetEntityRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetEntityRepository))
}

// GetFeatureRepository mocks base method.
func (m *MockSQLRepository) GetFeatureRepository() repositories.FeatureRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureRepository")
	ret0, _ := ret[0].(repositories.FeatureRepository)
	return ret0
}

// GetFeatureRepository indicates an expected call of GetFeatureRepository.
func (mr *MockSQLRepositoryMockRecorder) GetFeatureRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetFeatureRepository))
}

// GetMoneyFlowCalcRepository mocks base method.
func (m *MockSQLRepository) GetMoneyFlowCalcRepository() repositories.MoneyFlowRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoneyFlowCalcRepository")
	ret0, _ := ret[0].(repositories.MoneyFlowRepository)
	return ret0
}

// GetMoneyFlowCalcRepository indicates an expected call of GetMoneyFlowCalcRepository.
func (mr *MockSQLRepositoryMockRecorder) GetMoneyFlowCalcRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoneyFlowCalcRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetMoneyFlowCalcRepository))
}

// GetReconToolHistoryRepository mocks base method.
func (m *MockSQLRepository) GetReconToolHistoryRepository() repositories.ReconToolHistoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReconToolHistoryRepository")
	ret0, _ := ret[0].(repositories.ReconToolHistoryRepository)
	return ret0
}

// GetReconToolHistoryRepository indicates an expected call of GetReconToolHistoryRepository.
func (mr *MockSQLRepositoryMockRecorder) GetReconToolHistoryRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReconToolHistoryRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetReconToolHistoryRepository))
}

// GetSubCategoryRepository mocks base method.
func (m *MockSQLRepository) GetSubCategoryRepository() repositories.SubCategoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubCategoryRepository")
	ret0, _ := ret[0].(repositories.SubCategoryRepository)
	return ret0
}

// GetSubCategoryRepository indicates an expected call of GetSubCategoryRepository.
func (mr *MockSQLRepositoryMockRecorder) GetSubCategoryRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubCategoryRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetSubCategoryRepository))
}

// GetTransactionRepository mocks base method.
func (m *MockSQLRepository) GetTransactionRepository() repositories.TransactionRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionRepository")
	ret0, _ := ret[0].(repositories.TransactionRepository)
	return ret0
}

// GetTransactionRepository indicates an expected call of GetTransactionRepository.
func (mr *MockSQLRepositoryMockRecorder) GetTransactionRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetTransactionRepository))
}

// GetWalletTransactionRepository mocks base method.
func (m *MockSQLRepository) GetWalletTransactionRepository() repositories.WalletTransactionRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletTransactionRepository")
	ret0, _ := ret[0].(repositories.WalletTransactionRepository)
	return ret0
}

// GetWalletTransactionRepository indicates an expected call of GetWalletTransactionRepository.
func (mr *MockSQLRepositoryMockRecorder) GetWalletTransactionRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletTransactionRepository", reflect.TypeOf((*MockSQLRepository)(nil).GetWalletTransactionRepository))
}
