// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_sub_category.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_sub_category.go -destination=./internal/repositories/mock/sql_sub_category_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockSubCategoryRepository is a mock of SubCategoryRepository interface.
type MockSubCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubCategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockSubCategoryRepositoryMockRecorder is the mock recorder for MockSubCategoryRepository.
type MockSubCategoryRepositoryMockRecorder struct {
	mock *MockSubCategoryRepository
}

// NewMockSubCategoryRepository creates a new mock instance.
func NewMockSubCategoryRepository(ctrl *gomock.Controller) *MockSubCategoryRepository {
	mock := &MockSubCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockSubCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubCategoryRepository) EXPECT() *MockSubCategoryRepositoryMockRecorder {
	return m.recorder
}

// CheckSubCategoryByCodeAndCategoryCode mocks base method.
func (m *MockSubCategoryRepository) CheckSubCategoryByCodeAndCategoryCode(ctx context.Context, code, categoryCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSubCategoryByCodeAndCategoryCode", ctx, code, categoryCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSubCategoryByCodeAndCategoryCode indicates an expected call of CheckSubCategoryByCodeAndCategoryCode.
func (mr *MockSubCategoryRepositoryMockRecorder) CheckSubCategoryByCodeAndCategoryCode(ctx, code, categoryCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSubCategoryByCodeAndCategoryCode", reflect.TypeOf((*MockSubCategoryRepository)(nil).CheckSubCategoryByCodeAndCategoryCode), ctx, code, categoryCode)
}

// Create mocks base method.
func (m *MockSubCategoryRepository) Create(ctx context.Context, in *models.CreateSubCategory) (*models.SubCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*models.SubCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSubCategoryRepositoryMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubCategoryRepository)(nil).Create), ctx, in)
}

// GetAll mocks base method.
func (m *MockSubCategoryRepository) GetAll(ctx context.Context) (*[]models.SubCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*[]models.SubCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubCategoryRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubCategoryRepository)(nil).GetAll), ctx)
}

// GetByCode mocks base method.
func (m *MockSubCategoryRepository) GetByCode(ctx context.Context, code string) (*models.SubCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", ctx, code)
	ret0, _ := ret[0].(*models.SubCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockSubCategoryRepositoryMockRecorder) GetByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockSubCategoryRepository)(nil).GetByCode), ctx, code)
}
