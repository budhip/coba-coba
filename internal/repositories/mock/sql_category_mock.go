// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_category.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_category.go -destination=./internal/repositories/mock/sql_category_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// CheckCategoryByCode mocks base method.
func (m *MockCategoryRepository) CheckCategoryByCode(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCategoryByCode", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCategoryByCode indicates an expected call of CheckCategoryByCode.
func (mr *MockCategoryRepositoryMockRecorder) CheckCategoryByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCategoryByCode", reflect.TypeOf((*MockCategoryRepository)(nil).CheckCategoryByCode), ctx, code)
}

// Create mocks base method.
func (m *MockCategoryRepository) Create(ctx context.Context, in *models.CreateCategoryIn) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryRepositoryMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryRepository)(nil).Create), ctx, in)
}

// GetByCode mocks base method.
func (m *MockCategoryRepository) GetByCode(ctx context.Context, code string) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCode", ctx, code)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCode indicates an expected call of GetByCode.
func (mr *MockCategoryRepositoryMockRecorder) GetByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCode", reflect.TypeOf((*MockCategoryRepository)(nil).GetByCode), ctx, code)
}

// GetCategorySequenceCode mocks base method.
func (m *MockCategoryRepository) GetCategorySequenceCode(ctx context.Context, code string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategorySequenceCode", ctx, code)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategorySequenceCode indicates an expected call of GetCategorySequenceCode.
func (mr *MockCategoryRepositoryMockRecorder) GetCategorySequenceCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategorySequenceCode", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategorySequenceCode), ctx, code)
}

// List mocks base method.
func (m *MockCategoryRepository) List(ctx context.Context) (*[]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(*[]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCategoryRepositoryMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCategoryRepository)(nil).List), ctx)
}
