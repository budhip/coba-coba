// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_recon_tool_history.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_recon_tool_history.go -destination=./internal/repositories/mock/sql_recon_tool_history_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockReconToolHistoryRepository is a mock of ReconToolHistoryRepository interface.
type MockReconToolHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReconToolHistoryRepositoryMockRecorder
	isgomock struct{}
}

// MockReconToolHistoryRepositoryMockRecorder is the mock recorder for MockReconToolHistoryRepository.
type MockReconToolHistoryRepositoryMockRecorder struct {
	mock *MockReconToolHistoryRepository
}

// NewMockReconToolHistoryRepository creates a new mock instance.
func NewMockReconToolHistoryRepository(ctrl *gomock.Controller) *MockReconToolHistoryRepository {
	mock := &MockReconToolHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockReconToolHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconToolHistoryRepository) EXPECT() *MockReconToolHistoryRepositoryMockRecorder {
	return m.recorder
}

// CountAll mocks base method.
func (m *MockReconToolHistoryRepository) CountAll(ctx context.Context, opts models.ReconToolHistoryFilterOptions) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAll", ctx, opts)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAll indicates an expected call of CountAll.
func (mr *MockReconToolHistoryRepositoryMockRecorder) CountAll(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAll", reflect.TypeOf((*MockReconToolHistoryRepository)(nil).CountAll), ctx, opts)
}

// Create mocks base method.
func (m *MockReconToolHistoryRepository) Create(ctx context.Context, in *models.CreateReconToolHistoryIn) (*models.ReconToolHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, in)
	ret0, _ := ret[0].(*models.ReconToolHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReconToolHistoryRepositoryMockRecorder) Create(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReconToolHistoryRepository)(nil).Create), ctx, in)
}

// DeleteByID mocks base method.
func (m *MockReconToolHistoryRepository) DeleteByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockReconToolHistoryRepositoryMockRecorder) DeleteByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockReconToolHistoryRepository)(nil).DeleteByID), ctx, id)
}

// GetById mocks base method.
func (m *MockReconToolHistoryRepository) GetById(ctx context.Context, id uint64) (*models.ReconToolHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*models.ReconToolHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockReconToolHistoryRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockReconToolHistoryRepository)(nil).GetById), ctx, id)
}

// GetList mocks base method.
func (m *MockReconToolHistoryRepository) GetList(ctx context.Context, opts models.ReconToolHistoryFilterOptions) ([]models.ReconToolHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, opts)
	ret0, _ := ret[0].([]models.ReconToolHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockReconToolHistoryRepositoryMockRecorder) GetList(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockReconToolHistoryRepository)(nil).GetList), ctx, opts)
}

// Update mocks base method.
func (m *MockReconToolHistoryRepository) Update(ctx context.Context, id uint64, in *models.ReconToolHistory) (*models.ReconToolHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, in)
	ret0, _ := ret[0].(*models.ReconToolHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockReconToolHistoryRepositoryMockRecorder) Update(ctx, id, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReconToolHistoryRepository)(nil).Update), ctx, id, in)
}
