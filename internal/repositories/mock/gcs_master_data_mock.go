// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/gcs_master_data.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/gcs_master_data.go -destination=./internal/repositories/mock/gcs_master_data_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "bitbucket.org/Amartha/go-fp-transaction/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMasterDataRepository is a mock of MasterDataRepository interface.
type MockMasterDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterDataRepositoryMockRecorder
	isgomock struct{}
}

// MockMasterDataRepositoryMockRecorder is the mock recorder for MockMasterDataRepository.
type MockMasterDataRepositoryMockRecorder struct {
	mock *MockMasterDataRepository
}

// NewMockMasterDataRepository creates a new mock instance.
func NewMockMasterDataRepository(ctrl *gomock.Controller) *MockMasterDataRepository {
	mock := &MockMasterDataRepository{ctrl: ctrl}
	mock.recorder = &MockMasterDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterDataRepository) EXPECT() *MockMasterDataRepositoryMockRecorder {
	return m.recorder
}

// GetConfigVATRevenue mocks base method.
func (m *MockMasterDataRepository) GetConfigVATRevenue(ctx context.Context) ([]models.ConfigVatRevenue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigVATRevenue", ctx)
	ret0, _ := ret[0].([]models.ConfigVatRevenue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigVATRevenue indicates an expected call of GetConfigVATRevenue.
func (mr *MockMasterDataRepositoryMockRecorder) GetConfigVATRevenue(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigVATRevenue", reflect.TypeOf((*MockMasterDataRepository)(nil).GetConfigVATRevenue), ctx)
}

// GetListOrderType mocks base method.
func (m *MockMasterDataRepository) GetListOrderType(ctx context.Context, filter models.FilterMasterData) ([]models.OrderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOrderType", ctx, filter)
	ret0, _ := ret[0].([]models.OrderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOrderType indicates an expected call of GetListOrderType.
func (mr *MockMasterDataRepositoryMockRecorder) GetListOrderType(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOrderType", reflect.TypeOf((*MockMasterDataRepository)(nil).GetListOrderType), ctx, filter)
}

// GetListOrderTypeCode mocks base method.
func (m *MockMasterDataRepository) GetListOrderTypeCode(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOrderTypeCode", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOrderTypeCode indicates an expected call of GetListOrderTypeCode.
func (mr *MockMasterDataRepositoryMockRecorder) GetListOrderTypeCode(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOrderTypeCode", reflect.TypeOf((*MockMasterDataRepository)(nil).GetListOrderTypeCode), ctx)
}

// GetListTransactionType mocks base method.
func (m *MockMasterDataRepository) GetListTransactionType(ctx context.Context, filter models.FilterMasterData) ([]models.TransactionType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransactionType", ctx, filter)
	ret0, _ := ret[0].([]models.TransactionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTransactionType indicates an expected call of GetListTransactionType.
func (mr *MockMasterDataRepositoryMockRecorder) GetListTransactionType(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransactionType", reflect.TypeOf((*MockMasterDataRepository)(nil).GetListTransactionType), ctx, filter)
}

// GetListTransactionTypeCode mocks base method.
func (m *MockMasterDataRepository) GetListTransactionTypeCode(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListTransactionTypeCode", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListTransactionTypeCode indicates an expected call of GetListTransactionTypeCode.
func (mr *MockMasterDataRepositoryMockRecorder) GetListTransactionTypeCode(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListTransactionTypeCode", reflect.TypeOf((*MockMasterDataRepository)(nil).GetListTransactionTypeCode), ctx)
}

// GetOrderType mocks base method.
func (m *MockMasterDataRepository) GetOrderType(ctx context.Context, orderTypeCode string) (*models.OrderType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderType", ctx, orderTypeCode)
	ret0, _ := ret[0].(*models.OrderType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderType indicates an expected call of GetOrderType.
func (mr *MockMasterDataRepositoryMockRecorder) GetOrderType(ctx, orderTypeCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderType", reflect.TypeOf((*MockMasterDataRepository)(nil).GetOrderType), ctx, orderTypeCode)
}

// GetTransactionType mocks base method.
func (m *MockMasterDataRepository) GetTransactionType(ctx context.Context, transactionTypeCode string) (*models.TransactionType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionType", ctx, transactionTypeCode)
	ret0, _ := ret[0].(*models.TransactionType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionType indicates an expected call of GetTransactionType.
func (mr *MockMasterDataRepositoryMockRecorder) GetTransactionType(ctx, transactionTypeCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionType", reflect.TypeOf((*MockMasterDataRepository)(nil).GetTransactionType), ctx, transactionTypeCode)
}

// RefreshDataPeriodically mocks base method.
func (m *MockMasterDataRepository) RefreshDataPeriodically(ctx context.Context, interval time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshDataPeriodically", ctx, interval)
}

// RefreshDataPeriodically indicates an expected call of RefreshDataPeriodically.
func (mr *MockMasterDataRepositoryMockRecorder) RefreshDataPeriodically(ctx, interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshDataPeriodically", reflect.TypeOf((*MockMasterDataRepository)(nil).RefreshDataPeriodically), ctx, interval)
}

// UpsertConfigVATRevenue mocks base method.
func (m *MockMasterDataRepository) UpsertConfigVATRevenue(ctx context.Context, vatRevenue []models.ConfigVatRevenue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertConfigVATRevenue", ctx, vatRevenue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertConfigVATRevenue indicates an expected call of UpsertConfigVATRevenue.
func (mr *MockMasterDataRepositoryMockRecorder) UpsertConfigVATRevenue(ctx, vatRevenue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertConfigVATRevenue", reflect.TypeOf((*MockMasterDataRepository)(nil).UpsertConfigVATRevenue), ctx, vatRevenue)
}

// UpsertOrderType mocks base method.
func (m *MockMasterDataRepository) UpsertOrderType(ctx context.Context, orderType models.OrderType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrderType", ctx, orderType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOrderType indicates an expected call of UpsertOrderType.
func (mr *MockMasterDataRepositoryMockRecorder) UpsertOrderType(ctx, orderType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrderType", reflect.TypeOf((*MockMasterDataRepository)(nil).UpsertOrderType), ctx, orderType)
}
