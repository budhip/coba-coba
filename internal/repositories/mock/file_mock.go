// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/file.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/file.go -destination=./internal/repositories/mock/file_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	io "io"
	multipart "mime/multipart"
	reflect "reflect"

	repositories "bitbucket.org/Amartha/go-fp-transaction/internal/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
	isgomock struct{}
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// StreamReadCSVFile mocks base method.
func (m *MockFileRepository) StreamReadCSVFile(ctx context.Context, fileRead io.ReadCloser) <-chan repositories.StreamReadCSVFileResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamReadCSVFile", ctx, fileRead)
	ret0, _ := ret[0].(<-chan repositories.StreamReadCSVFileResult)
	return ret0
}

// StreamReadCSVFile indicates an expected call of StreamReadCSVFile.
func (mr *MockFileRepositoryMockRecorder) StreamReadCSVFile(ctx, fileRead any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamReadCSVFile", reflect.TypeOf((*MockFileRepository)(nil).StreamReadCSVFile), ctx, fileRead)
}

// StreamReadMultipartFile mocks base method.
func (m *MockFileRepository) StreamReadMultipartFile(ctx context.Context, file *multipart.FileHeader) <-chan repositories.StreamReadMultipartFileResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamReadMultipartFile", ctx, file)
	ret0, _ := ret[0].(<-chan repositories.StreamReadMultipartFileResult)
	return ret0
}

// StreamReadMultipartFile indicates an expected call of StreamReadMultipartFile.
func (mr *MockFileRepositoryMockRecorder) StreamReadMultipartFile(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamReadMultipartFile", reflect.TypeOf((*MockFileRepository)(nil).StreamReadMultipartFile), ctx, file)
}
