// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/sql_tx.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repositories/sql_tx.go -destination=./internal/repositories/mock/sql_tx_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MocksqlTx is a mock of sqlTx interface.
type MocksqlTx struct {
	ctrl     *gomock.Controller
	recorder *MocksqlTxMockRecorder
	isgomock struct{}
}

// MocksqlTxMockRecorder is the mock recorder for MocksqlTx.
type MocksqlTxMockRecorder struct {
	mock *MocksqlTx
}

// NewMocksqlTx creates a new mock instance.
func NewMocksqlTx(ctrl *gomock.Controller) *MocksqlTx {
	mock := &MocksqlTx{ctrl: ctrl}
	mock.recorder = &MocksqlTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksqlTx) EXPECT() *MocksqlTxMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *MocksqlTx) ExecContext(arg0 context.Context, arg1 string, arg2 ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MocksqlTxMockRecorder) ExecContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MocksqlTx)(nil).ExecContext), varargs...)
}

// PrepareContext mocks base method.
func (m *MocksqlTx) PrepareContext(arg0 context.Context, arg1 string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", arg0, arg1)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MocksqlTxMockRecorder) PrepareContext(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MocksqlTx)(nil).PrepareContext), arg0, arg1)
}

// QueryContext mocks base method.
func (m *MocksqlTx) QueryContext(arg0 context.Context, arg1 string, arg2 ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MocksqlTxMockRecorder) QueryContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MocksqlTx)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MocksqlTx) QueryRowContext(arg0 context.Context, arg1 string, arg2 ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MocksqlTxMockRecorder) QueryRowContext(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MocksqlTx)(nil).QueryRowContext), varargs...)
}
