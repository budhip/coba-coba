// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/common/accounting/client.go
//
// Generated by this command:
//
//	mockgen -source=./internal/common/accounting/client.go -destination=./internal/common/accounting/mock/client_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	accounting "bitbucket.org/Amartha/go-fp-transaction/internal/common/accounting"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetInvestedAccountNumber mocks base method.
func (m *MockClient) GetInvestedAccountNumber(ctx context.Context, cihAccountNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvestedAccountNumber", ctx, cihAccountNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvestedAccountNumber indicates an expected call of GetInvestedAccountNumber.
func (mr *MockClientMockRecorder) GetInvestedAccountNumber(ctx, cihAccountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvestedAccountNumber", reflect.TypeOf((*MockClient)(nil).GetInvestedAccountNumber), ctx, cihAccountNumber)
}

// GetLoanAdvancePayment mocks base method.
func (m *MockClient) GetLoanAdvancePayment(ctx context.Context, loanAccountNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanAdvancePayment", ctx, loanAccountNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanAdvancePayment indicates an expected call of GetLoanAdvancePayment.
func (mr *MockClientMockRecorder) GetLoanAdvancePayment(ctx, loanAccountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanAdvancePayment", reflect.TypeOf((*MockClient)(nil).GetLoanAdvancePayment), ctx, loanAccountNumber)
}

// GetLoanPartnerAccounts mocks base method.
func (m *MockClient) GetLoanPartnerAccounts(ctx context.Context, loanAccountNumber, loanKind string) (accounting.ResponseGetListAccountNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanPartnerAccounts", ctx, loanAccountNumber, loanKind)
	ret0, _ := ret[0].(accounting.ResponseGetListAccountNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanPartnerAccounts indicates an expected call of GetLoanPartnerAccounts.
func (mr *MockClientMockRecorder) GetLoanPartnerAccounts(ctx, loanAccountNumber, loanKind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanPartnerAccounts", reflect.TypeOf((*MockClient)(nil).GetLoanPartnerAccounts), ctx, loanAccountNumber, loanKind)
}

// GetReceivableAccountNumber mocks base method.
func (m *MockClient) GetReceivableAccountNumber(ctx context.Context, cihAccountNumber string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceivableAccountNumber", ctx, cihAccountNumber)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceivableAccountNumber indicates an expected call of GetReceivableAccountNumber.
func (mr *MockClientMockRecorder) GetReceivableAccountNumber(ctx, cihAccountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceivableAccountNumber", reflect.TypeOf((*MockClient)(nil).GetReceivableAccountNumber), ctx, cihAccountNumber)
}
