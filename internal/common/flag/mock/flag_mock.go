// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/common/flag/flag.go
//
// Generated by this command:
//
//	mockgen -source=./internal/common/flag/flag.go -destination=./internal/common/flag/mock/flag_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	flag "bitbucket.org/Amartha/go-feature-flag-sdk"
	api "github.com/Unleash/unleash-client-go/v3/api"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GetVariant mocks base method.
func (m *MockClient) GetVariant(name string) *api.Variant {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariant", name)
	ret0, _ := ret[0].(*api.Variant)
	return ret0
}

// GetVariant indicates an expected call of GetVariant.
func (mr *MockClientMockRecorder) GetVariant(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariant", reflect.TypeOf((*MockClient)(nil).GetVariant), name)
}

// IsEnabled mocks base method.
func (m *MockClient) IsEnabled(arg0 string, arg1 ...flag.FeatureOption) bool {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsEnabled", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockClientMockRecorder) IsEnabled(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockClient)(nil).IsEnabled), varargs...)
}

// WaitForReady mocks base method.
func (m *MockClient) WaitForReady() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForReady")
}

// WaitForReady indicates an expected call of WaitForReady.
func (mr *MockClientMockRecorder) WaitForReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForReady", reflect.TypeOf((*MockClient)(nil).WaitForReady))
}
