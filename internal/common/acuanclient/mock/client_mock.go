// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/common/acuanclient/client.go
//
// Generated by this command:
//
//	mockgen -source=./internal/common/acuanclient/client.go -destination=./internal/common/acuanclient/mock/client_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	acuanclient "bitbucket.org/Amartha/go-fp-transaction/internal/common/acuanclient"
	gomock "go.uber.org/mock/gomock"
)

// MockAcuanClient is a mock of AcuanClient interface.
type MockAcuanClient struct {
	ctrl     *gomock.Controller
	recorder *MockAcuanClientMockRecorder
	isgomock struct{}
}

// MockAcuanClientMockRecorder is the mock recorder for MockAcuanClient.
type MockAcuanClientMockRecorder struct {
	mock *MockAcuanClient
}

// NewMockAcuanClient creates a new mock instance.
func NewMockAcuanClient(ctrl *gomock.Controller) *MockAcuanClient {
	mock := &MockAcuanClient{ctrl: ctrl}
	mock.recorder = &MockAcuanClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAcuanClient) EXPECT() *MockAcuanClientMockRecorder {
	return m.recorder
}

// PublishTransaction mocks base method.
func (m *MockAcuanClient) PublishTransaction(ctx context.Context, req acuanclient.PublishTransactionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTransaction", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTransaction indicates an expected call of PublishTransaction.
func (mr *MockAcuanClientMockRecorder) PublishTransaction(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTransaction", reflect.TypeOf((*MockAcuanClient)(nil).PublishTransaction), ctx, req)
}
