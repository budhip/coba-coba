// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/common/metrics/metrics.go
//
// Generated by this command:
//
//	mockgen -source=./internal/common/metrics/metrics.go -destination=./internal/common/metrics/mock/metrics_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	sql "database/sql"
	reflect "reflect"
	time "time"

	metrics "bitbucket.org/Amartha/go-fp-transaction/internal/common/metrics"
	fiber "github.com/gofiber/fiber/v2"
	prometheus "github.com/prometheus/client_golang/prometheus"
	metrics0 "github.com/rcrowley/go-metrics"
	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
	isgomock struct{}
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// GetBalancePrometheus mocks base method.
func (m *MockMetrics) GetBalancePrometheus() *metrics.BalancePrometheusMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalancePrometheus")
	ret0, _ := ret[0].(*metrics.BalancePrometheusMetrics)
	return ret0
}

// GetBalancePrometheus indicates an expected call of GetBalancePrometheus.
func (mr *MockMetricsMockRecorder) GetBalancePrometheus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalancePrometheus", reflect.TypeOf((*MockMetrics)(nil).GetBalancePrometheus))
}

// GetHTTPClientPrometheus mocks base method.
func (m *MockMetrics) GetHTTPClientPrometheus() *metrics.HTTPClientPrometheusMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClientPrometheus")
	ret0, _ := ret[0].(*metrics.HTTPClientPrometheusMetrics)
	return ret0
}

// GetHTTPClientPrometheus indicates an expected call of GetHTTPClientPrometheus.
func (mr *MockMetricsMockRecorder) GetHTTPClientPrometheus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClientPrometheus", reflect.TypeOf((*MockMetrics)(nil).GetHTTPClientPrometheus))
}

// GetPublisherPrometheus mocks base method.
func (m *MockMetrics) GetPublisherPrometheus() *metrics.PublisherPrometheusMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublisherPrometheus")
	ret0, _ := ret[0].(*metrics.PublisherPrometheusMetrics)
	return ret0
}

// GetPublisherPrometheus indicates an expected call of GetPublisherPrometheus.
func (mr *MockMetricsMockRecorder) GetPublisherPrometheus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublisherPrometheus", reflect.TypeOf((*MockMetrics)(nil).GetPublisherPrometheus))
}

// PrometheusRegisterer mocks base method.
func (m *MockMetrics) PrometheusRegisterer() prometheus.Registerer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusRegisterer")
	ret0, _ := ret[0].(prometheus.Registerer)
	return ret0
}

// PrometheusRegisterer indicates an expected call of PrometheusRegisterer.
func (mr *MockMetricsMockRecorder) PrometheusRegisterer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusRegisterer", reflect.TypeOf((*MockMetrics)(nil).PrometheusRegisterer))
}

// RegisterDB mocks base method.
func (m *MockMetrics) RegisterDB(db *sql.DB, role, dbName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDB", db, role, dbName)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterDB indicates an expected call of RegisterDB.
func (mr *MockMetricsMockRecorder) RegisterDB(db, role, dbName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDB", reflect.TypeOf((*MockMetrics)(nil).RegisterDB), db, role, dbName)
}

// RegisterFiberMiddleware mocks base method.
func (m *MockMetrics) RegisterFiberMiddleware(app *fiber.App, path, serviceName, namespace string) func(*fiber.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFiberMiddleware", app, path, serviceName, namespace)
	ret0, _ := ret[0].(func(*fiber.Ctx) error)
	return ret0
}

// RegisterFiberMiddleware indicates an expected call of RegisterFiberMiddleware.
func (mr *MockMetricsMockRecorder) RegisterFiberMiddleware(app, path, serviceName, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFiberMiddleware", reflect.TypeOf((*MockMetrics)(nil).RegisterFiberMiddleware), app, path, serviceName, namespace)
}

// RegisterRedis mocks base method.
func (m *MockMetrics) RegisterRedis(client *redis.Client, serviceName, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRedis", client, serviceName, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRedis indicates an expected call of RegisterRedis.
func (mr *MockMetricsMockRecorder) RegisterRedis(client, serviceName, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRedis", reflect.TypeOf((*MockMetrics)(nil).RegisterRedis), client, serviceName, namespace)
}

// SaramaRegistry mocks base method.
func (m *MockMetrics) SaramaRegistry(name string, flushInterval time.Duration) metrics0.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaramaRegistry", name, flushInterval)
	ret0, _ := ret[0].(metrics0.Registry)
	return ret0
}

// SaramaRegistry indicates an expected call of SaramaRegistry.
func (mr *MockMetricsMockRecorder) SaramaRegistry(name, flushInterval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaramaRegistry", reflect.TypeOf((*MockMetrics)(nil).SaramaRegistry), name, flushInterval)
}
