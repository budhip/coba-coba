// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/common/queueunicorn/client.go
//
// Generated by this command:
//
//	mockgen -source=./internal/common/queueunicorn/client.go -destination=./internal/common/queueunicorn/mock/client_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	queueunicorn "bitbucket.org/Amartha/go-fp-transaction/internal/common/queueunicorn"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendJobHTTP mocks base method.
func (m *MockClient) SendJobHTTP(ctx context.Context, request queueunicorn.RequestJobHTTP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendJobHTTP", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendJobHTTP indicates an expected call of SendJobHTTP.
func (mr *MockClientMockRecorder) SendJobHTTP(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendJobHTTP", reflect.TypeOf((*MockClient)(nil).SendJobHTTP), ctx, request)
}
