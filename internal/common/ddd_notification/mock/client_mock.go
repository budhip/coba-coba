// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/common/ddd_notification/client.go
//
// Generated by this command:
//
//	mockgen -source=./internal/common/ddd_notification/client.go -destination=./internal/common/ddd_notification/mock/client_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	ddd_notification "bitbucket.org/Amartha/go-fp-transaction/internal/common/ddd_notification"
	gomock "go.uber.org/mock/gomock"
)

// MockDDDNotification is a mock of DDDNotification interface.
type MockDDDNotification struct {
	ctrl     *gomock.Controller
	recorder *MockDDDNotificationMockRecorder
	isgomock struct{}
}

// MockDDDNotificationMockRecorder is the mock recorder for MockDDDNotification.
type MockDDDNotificationMockRecorder struct {
	mock *MockDDDNotification
}

// NewMockDDDNotification creates a new mock instance.
func NewMockDDDNotification(ctrl *gomock.Controller) *MockDDDNotification {
	mock := &MockDDDNotification{ctrl: ctrl}
	mock.recorder = &MockDDDNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDDDNotification) EXPECT() *MockDDDNotificationMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockDDDNotification) SendEmail(ctx context.Context, request ddd_notification.RequestEmail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockDDDNotificationMockRecorder) SendEmail(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockDDDNotification)(nil).SendEmail), ctx, request)
}

// SendMessageToSlack mocks base method.
func (m *MockDDDNotification) SendMessageToSlack(ctx context.Context, message ddd_notification.DataMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageToSlack", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageToSlack indicates an expected call of SendMessageToSlack.
func (mr *MockDDDNotificationMockRecorder) SendMessageToSlack(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToSlack", reflect.TypeOf((*MockDDDNotification)(nil).SendMessageToSlack), ctx, message)
}
