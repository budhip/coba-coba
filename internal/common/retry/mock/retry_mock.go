// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/common/retry/retry.go
//
// Generated by this command:
//
//	mockgen -source=./internal/common/retry/retry.go -destination=./internal/common/retry/mock/retry_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRetryer is a mock of Retryer interface.
type MockRetryer struct {
	ctrl     *gomock.Controller
	recorder *MockRetryerMockRecorder
	isgomock struct{}
}

// MockRetryerMockRecorder is the mock recorder for MockRetryer.
type MockRetryerMockRecorder struct {
	mock *MockRetryer
}

// NewMockRetryer creates a new mock instance.
func NewMockRetryer(ctrl *gomock.Controller) *MockRetryer {
	mock := &MockRetryer{ctrl: ctrl}
	mock.recorder = &MockRetryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRetryer) EXPECT() *MockRetryerMockRecorder {
	return m.recorder
}

// Retry mocks base method.
func (m *MockRetryer) Retry(ctx context.Context, operation, dlqCallback func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retry", ctx, operation, dlqCallback)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retry indicates an expected call of Retry.
func (mr *MockRetryerMockRecorder) Retry(ctx, operation, dlqCallback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retry", reflect.TypeOf((*MockRetryer)(nil).Retry), ctx, operation, dlqCallback)
}

// StopRetryWithErr mocks base method.
func (m *MockRetryer) StopRetryWithErr(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRetryWithErr", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRetryWithErr indicates an expected call of StopRetryWithErr.
func (mr *MockRetryerMockRecorder) StopRetryWithErr(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRetryWithErr", reflect.TypeOf((*MockRetryer)(nil).StopRetryWithErr), err)
}
