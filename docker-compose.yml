version: '3.0'

networks:
  shared-network:
    driver: bridge

volumes:
  # pg-data:
  cache:

services:
  db-transaction:
    image: postgres:13
    hostname: host
    container_name: postgresdb
    restart: always
    networks:
      - shared-network
    # volumes:
    #   - pg-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'transaction'
    ports:
      - 25434:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrate-transaction:
    image: migrate/migrate
    hostname: host
    container_name: migrate
    restart: on-failure
    networks:
      - shared-network
    volumes:
      - ./tests/integration/db/migrations:/migrations
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://postgres:postgres@postgresdb:5432/transaction?sslmode=disable",
      ]
    command: ["up"]
    links: 
      - db-transaction
    depends_on:
      - db-transaction

  redis-transaction:
    image: redis:latest
    hostname: host
    container_name: redis
    restart: always
    networks:
      - shared-network
    ports:
      - '26379:6379'
    volumes: 
      - cache:/data
  
  zoo-transaction:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: host
    container_name: zoo1
    # restart: always
    networks:
      - shared-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka-transaction:
    image: confluentinc/cp-kafka:7.3.2
    hostname: host
    container_name: kafka
    # restart: on-failure
    networks:
      - shared-network
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_NODE_ID: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    depends_on:
      - zoo-transaction

  kafka-ui-transaction:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 28080:8080
    depends_on:
      - kafka-transaction
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: host.docker.internal:29092 
      KAFKA_CLUSTERS_0_METRICS_PORT: 9999
